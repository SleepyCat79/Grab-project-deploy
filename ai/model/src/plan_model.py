"""travel_planner.py ‚Äì rebuilt for explicit JSON output
=================================================================
This version drops the earlier Pydantic schema and instead forces the
LLM to return a **single valid JSON object** that exactly matches the
shape FE/BE y√™u c·∫ßu (trip_name, start_date, ‚Ä¶ plan_by_day ‚Üí segments ‚Üí
activities ‚Ä¶).

Key points
-----------
* `JSON_SCHEMA_EXAMPLE` holds a *minimal* skeleton of the structure and
  is embedded straight into the prompt.
* `JsonOutputParser` (LangChain) post‚Äëvalidates the LLM response and
  returns a native Python dict you can hand to FE / persist to DB.
* A helper `TravelPlanner.generate_plan` takes the consolidated
  `input_data = {"accommodations": [...], "places": [...], "restaurants": [...]}`.
  + You can optionally pass `trip_name`, `start_date`, `end_date`, `user_id`.
* Ready stubs (`WeatherTool`, `MapTool`) illustrate c√°ch add tools sau
  n√†y ‚Äì ch·ªâ c·∫ßn b·ªï sung `func` th·∫≠t v√† li·ªát k√™ v√†o `TOOLS`.
"""
from __future__ import annotations

import json
import logging
import os
from datetime import date
from pathlib import Path
from typing import Any, Dict, List, Optional
import time

from dotenv import load_dotenv
from langchain.agents import Tool, initialize_agent
from langchain.chains import LLMChain
from langchain_core.output_parsers import JsonOutputParser
from langchain.prompts import PromptTemplate
from langchain_openai import OpenAI
from langchain.chat_models import ChatOpenAI

# ---------------------------------------------------------------------------
# üîß ENV & Logging
# ---------------------------------------------------------------------------
ROOT = Path(__file__).resolve().parent
print(ROOT)
load_dotenv(ROOT / ".env")

logging.basicConfig(level=logging.INFO, format="%(levelname)s - %(message)s")
log = logging.getLogger("travel_planner")

# ---------------------------------------------------------------------------
# üìú Example JSON schema we expect from LLM
# ---------------------------------------------------------------------------
JSON_SCHEMA_EXAMPLE = {
    "trip_name": "<string ‚Äì ex: ƒê√† N·∫µng ngh·ªâ d∆∞·ª°ng 4 ng√†y>",
    "start_date": "YYYY-MM-DD",
    "end_date": "YYYY-MM-DD",
    "user_id": "<string>",
    "destination": "<string>",
    "plan_by_day": [
        {
            "date": "YYYY-MM-DD",
            "day_title": "Ng√†y 1: Kh√°m ph√° bi·ªÉn",
            "segments": [
                {
                    "time_of_day": "morning",
                    "activities": [
                        {
                            "id": "<string>",
                            "type": "accommodation | place | restaurant",
                            "name": "<string>",
                            "start_time": "HH:MM",
                            "end_time": "HH:MM",
                            "description": "<string>",
                            "location": "<string>",
                            "rating": "<number>",
                            "price": "<number or string>",
                            "image_url": "<string>",
                            "url": "<string>"
                        }
                    ]
                },
                {
                    "time_of_day": "afternoon",
                    "activities": [
                        {
                            "id": "<string>",
                            "type": "place",
                            "name": "<string>",
                            "start_time": "HH:MM",
                            "end_time": "HH:MM",
                            "description": "<string>",
                            "location": "<string>",
                            "rating": "<number>",
                            "price": "<number or string>",
                            "image_url": "<string>",
                            "url": "<string>"
                        }
                    ]
                }
            ]
        },
        {
            "date": "YYYY-MM-DD",
            "day_title": "Ng√†y 2: Kh√°m ph√° n√∫i",
            "segments": [
                {
                    "time_of_day": "morning",
                    "activities": [
                        {
                            "id": "<string>",
                            "type": "place",
                            "name": "<string>",
                            "start_time": "HH:MM",
                            "end_time": "HH:MM",
                            "description": "<string>",
                            "location": "<string>",
                            "rating": "<number>",
                            "price": "<number or string>",
                            "image_url": "<string>",
                            "url": "<string>"
                        }
                    ]
                }
            ]
        },
        {
            "date": "YYYY-MM-DD",
            "day_title": "Ng√†y 3: Kh√°m ph√° ·∫©m th·ª±c",
            "segments": [
                {
                    "time_of_day": "morning",
                    "activities": [
                        {
                            "id": "<string>",
                            "type": "restaurant",
                            "name": "<string>",
                            "start_time": "HH:MM",
                            "end_time": "HH:MM",
                            "description": "<string>",
                            "location": "<string>",
                            "rating": "<number>",
                            "price": "<number or string>",
                            "image_url": "<string>",
                            "url": "<string>"
                        }
                    ]
                }
            ]
        }
    ]
}

FORMAT_INSTRUCTIONS = (
    "Respond ONLY with VALID minified JSON (no markdown) that matches "
    "exactly the structure & keys of the following example: "
    f"{json.dumps(JSON_SCHEMA_EXAMPLE, ensure_ascii=False)}"
)

json_parser = JsonOutputParser()

# ---------------------------------------------------------------------------
# üõ†Ô∏è  Optional tools stubs ‚Äì plug real API later
# ---------------------------------------------------------------------------

def dummy_weather_tool(query: str) -> str:  # pragma: no cover
    """Placeholder weather tool."""
    return "{\"temp\":30, \"condition\":\"sunny\"}"

TOOLS: List[Tool] = [
    Tool(name="weather", func=dummy_weather_tool, description="L·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt"),
]

# ---------------------------------------------------------------------------
# üöÇ  Planner class
# ---------------------------------------------------------------------------


class PlanModel:
    def __init__(self, temperature: float = 0.7):
        self.llm = OpenAI(api_key=os.getenv("OPEN_API_KEY"), temperature=temperature)
        self.parser = json_parser  # langchain JSON parser

    # ---------------------------------------------------------------------
    # üîë Prompt builder
    # ---------------------------------------------------------------------
    def _build_prompt(self) -> PromptTemplate:
        template = (
            "You are an expert Vietnamese travel planner. Using the user data, "
            "generate a coherent multi‚Äëday trip strictly in JSON format.\n\n"
            "User context (JSON): {user_json}\n\n" + FORMAT_INSTRUCTIONS
        )
        # Specify the input variables explicitly
        return PromptTemplate(template=template, input_variables=["user_json"])

    # ------------------------------------------------------------------
    # üß©  Plain chain (no external tools)
    # ------------------------------------------------------------------
    def generate_plan(self, input_data: Dict[str, Any], **meta: Any) -> Dict[str, Any]:
        """LLM only ‚Äì returns parsed JSON dict."""
        log.info("Generating plan (no agent)‚Ä¶")
        
        try:
            merged_data = {**input_data, **meta}
            
            if "trip_name" not in merged_data:
                merged_data["trip_name"] = "Trip to " + merged_data.get("destination", "Unknown")
            
            try:
                from datetime import datetime, timedelta
                
                if not merged_data.get('start_date'):
                    start_date = datetime.now()
                    merged_data['start_date'] = start_date.strftime("%Y-%m-%d")
                else:
                    start_date = datetime.strptime(merged_data['start_date'], "%Y-%m-%d")
                
                if not merged_data.get('end_date'):
                    end_date = start_date + timedelta(days=2)  # Default 3-day trip
                    merged_data['end_date'] = end_date.strftime("%Y-%m-%d")
                else:
                    end_date = datetime.strptime(merged_data['end_date'], "%Y-%m-%d")
                
                num_days = (end_date - start_date).days + 1
                if num_days < 1:
                    num_days = 1
                    end_date = start_date
                    merged_data['end_date'] = end_date.strftime("%Y-%m-%d")
            except Exception as date_error:
                log.warning(f"Date parsing error: {date_error}. Using default dates.")
                from datetime import datetime, timedelta
                num_days = 3
                start_date = datetime.now()
                end_date = start_date + timedelta(days=num_days-1)
                merged_data['start_date'] = start_date.strftime("%Y-%m-%d")
                merged_data['end_date'] = end_date.strftime("%Y-%m-%d")
            
            final_plan = {
                "trip_name": merged_data.get("trip_name", "Trip to " + merged_data.get("destination", "Unknown")),
                "start_date": merged_data.get("start_date"),
                "end_date": merged_data.get("end_date"),
                "user_id": merged_data.get("user_id", "user123"),
                "destination": merged_data.get("destination", "Unknown"),
                "plan_by_day": []
            }
            
            # System prompt for more control
            system_prompt = """
            You are an expert Vietnamese travel planner specialized in creating detailed, engaging travel itineraries.
            Your recommendations should be specific, authentic, and tailored to the provided data.
            Follow these guidelines:
            1. You are an expert Vietnamese travel planner specialized in creating detailed, engaging travel itineraries.
            2. You must choose for the user the hotel first, to make sure that they can have a suitable hotel. If the next activities is far from the chosen hotel, you must choose another hotel and update the hotel in the itinerary, but you should rarely change the hotel.
            3. Create detailed descriptions in Vietnamese (3-4 sentences per item)
            4. Suggest realistic timings based on location proximity
            5. Include both popular attractions and hidden gems
            6. Consider weather, local events, and seasonal factors
            7. Provide practical tips for transportation between locations
            8. Return ONLY a valid JSON object that exactly matches the requested structure
            9. Use available tools when appropriate to enhance your recommendations
            10. IMPORTANT: Make sure to include only complete, valid JSON - do not cut off any fields or values
            """
            
            # Generate each day individually
            for day_num in range(num_days):
                current_date = start_date + timedelta(days=day_num)
                current_date_str = current_date.strftime("%Y-%m-%d")
                
                day_title = f"Ng√†y {day_num+1}: "
                if day_num == 0:
                    day_title += "Kh√°m ph√° bi·ªÉn"
                elif day_num == 1:
                    day_title += "Kh√°m ph√° n√∫i"
                elif day_num == 2:
                    day_title += "Kh√°m ph√° vƒÉn h√≥a"
                else:
                    day_title += "Kh√°m ph√° ƒë·ªãa ph∆∞∆°ng"
                
                # Create prompt for this specific day with simplified structure
                day_prompt = f"""
                T·∫°o chi ti·∫øt cho ng√†y {day_num+1} (ng√†y {current_date_str}) c·ªßa l·ªãch tr√¨nh du l·ªãch {merged_data.get("destination")}.
                H√£y t·∫°o 3 segments (morning, afternoon, evening) v·ªõi c√°c ho·∫°t ƒë·ªông ph√π h·ª£p.
                
                Th√¥ng tin chuy·∫øn ƒëi:
                ƒêi·ªÉm ƒë·∫øn: {merged_data.get("destination")}
                Kh√°ch s·∫°n: {[(acc.get("name", ""), acc.get("accommodation_id", "")) for acc in merged_data.get("accommodations", [])]}
                ƒê·ªãa ƒëi·ªÉm quan t√¢m: {[(place.get("name", ""), place.get("place_id", "")) for place in merged_data.get("places", [])]}
                Nh√† h√†ng: {[(rest.get("name", ""), rest.get("restaurant_id", "")) for rest in merged_data.get("restaurants", [])]}
                
                QUAN TR·ªåNG: Tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng JSON ƒë·∫ßy ƒë·ªß, c√≥ c·∫•u tr√∫c ch√≠nh x√°c nh∆∞ sau:
                {{
                    "date": "{current_date_str}",
                    "day_title": "{day_title}",
                    "segments": [
                        {{
                            "time_of_day": "morning",
                            "activities": [
                                {{
                                    "id": "{merged_data.get('places', [{}])[0].get('place_id', 'place_morning_day' + str(day_num+1)) if merged_data.get('places') else 'place_morning_day' + str(day_num+1)}",
                                    "type": "place",
                                    "name": "T√™n ƒë·ªãa ƒëi·ªÉm",
                                    "start_time": "08:00",
                                    "end_time": "10:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                                    "categories": "sightseeing",
                                    "duration": "2h",
                                    "opening_hours": "08:00-17:00",
                                    "rating": 4.5,
                                    "price": 50000,
                                    "image_url": "",
                                    "url": ""
                                }},
                                {{
                                    "id": "{merged_data.get('places', [{}])[min(1, len(merged_data.get('places', []))-1)].get('place_id', 'place_morning2_day' + str(day_num+1)) if len(merged_data.get('places', [])) > 1 else 'place_morning2_day' + str(day_num+1)}",
                                    "type": "place",
                                    "name": "T√™n ƒë·ªãa ƒëi·ªÉm th·ª© 2",
                                    "start_time": "10:30",
                                    "end_time": "12:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                                    "categories": "sightseeing",
                                    "duration": "1h30m",
                                    "opening_hours": "08:00-17:00",
                                    "rating": 4.5,
                                    "price": 50000,
                                    "image_url": "",
                                    "url": ""
                                }}
                            ]
                        }},
                        {{
                            "time_of_day": "afternoon",
                            "activities": [
                                {{
                                    "id": "{merged_data.get('places', [{}])[min(2, len(merged_data.get('places', []))-1)].get('place_id', 'place_afternoon_day' + str(day_num+1)) if len(merged_data.get('places', [])) > 2 else 'place_afternoon_day' + str(day_num+1)}",
                                    "type": "place",
                                    "name": "T√™n ƒë·ªãa ƒëi·ªÉm",
                                    "start_time": "13:00",
                                    "end_time": "15:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                                    "categories": "sightseeing",
                                    "duration": "2h",
                                    "opening_hours": "08:00-17:00",
                                    "rating": 4.5,
                                    "price": 50000,
                                    "image_url": "",
                                    "url": ""
                                }},
                                {{
                                    "id": "{merged_data.get('restaurants', [{}])[min(0, len(merged_data.get('restaurants', []))-1)].get('restaurant_id', 'restaurant_afternoon_day' + str(day_num+1)) if merged_data.get('restaurants') else 'restaurant_afternoon_day' + str(day_num+1)}",
                                    "type": "restaurant",
                                    "name": "Nh√† h√†ng tr∆∞a",
                                    "start_time": "15:30",
                                    "end_time": "17:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß", 
                                    "cuisines": "H·∫£i s·∫£n, ƒê·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng",
                                    "price_range": "100,000-300,000 VND",
                                    "rating": 4.5,
                                    "phone": "0123456789",
                                    "services": ["ƒë·∫∑t b√†n", "giao h√†ng"],
                                    "image_url": "",
                                    "url": ""
                                }}
                            ]
                        }},
                        {{
                            "time_of_day": "evening",
                            "activities": [
                                {{
                                    "id": "{merged_data.get('places', [{}])[min(3, len(merged_data.get('places', []))-1)].get('place_id', 'place_evening_day' + str(day_num+1)) if len(merged_data.get('places', [])) > 3 else 'place_evening_day' + str(day_num+1)}",
                                    "type": "place",
                                    "name": "ƒê·ªãa ƒëi·ªÉm bu·ªïi t·ªëi",
                                    "start_time": "18:00",
                                    "end_time": "19:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                                    "categories": "sightseeing",
                                    "duration": "1h",
                                    "opening_hours": "08:00-21:00",
                                    "rating": 4.5,
                                    "price": 50000,
                                    "image_url": "",
                                    "url": ""
                                }},
                                {{
                                    "id": "{merged_data.get('restaurants', [{}])[min(1, len(merged_data.get('restaurants', []))-1)].get('restaurant_id', 'restaurant_evening_day' + str(day_num+1)) if len(merged_data.get('restaurants', [])) > 1 else merged_data.get('restaurants', [{}])[0].get('restaurant_id', 'restaurant_evening_day' + str(day_num+1)) if merged_data.get('restaurants') else 'restaurant_evening_day' + str(day_num+1)}",
                                    "type": "restaurant",
                                    "name": "Nh√† h√†ng t·ªëi",
                                    "start_time": "19:30",
                                    "end_time": "21:30",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß", 
                                    "cuisines": "H·∫£i s·∫£n, ƒê·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng",
                                    "price_range": "100,000-300,000 VND",
                                    "rating": 4.5,
                                    "phone": "0123456789",
                                    "services": ["ƒë·∫∑t b√†n", "giao h√†ng"],
                                    "image_url": "",
                                    "url": ""
                                }}
                            ]
                        }}
                    ]
                }}
                
                H√£y chu·∫©n h√≥a ƒë·ªãnh d·∫°ng d·ªØ li·ªáu theo TYPE c·ªßa activity:
                1. N·∫øu type l√† "accommodation":
                   - B·ªï sung: "booking_link", "room_info", "tax_info", "elderly_friendly"
                   - ƒê·ªïi "address" th√†nh "location"
                   - Price n√™n l√† s·ªë nguy√™n (VND)
                   - S·ª≠ d·ª•ng ID t·ª´ danh s√°ch accommodation_id cung c·∫•p (hotel_XXXXX)
                
                2. N·∫øu type l√† "place":
                   - B·ªï sung: "categories", "duration", "opening_hours"
                   - Gi·ªØ nguy√™n "address"
                   - Price l√† s·ªë nguy√™n n·∫øu c√≥ (VND)
                   - S·ª≠ d·ª•ng ID t·ª´ danh s√°ch place_id cung c·∫•p (place_XXXXX)
                
                3. N·∫øu type l√† "restaurant":
                   - B·ªï sung: "cuisines", "price_range", "phone", "services" (array)
                   - Gi·ªØ nguy√™n "address"
                   - S·ª≠ d·ª•ng ID t·ª´ danh s√°ch restaurant_id cung c·∫•p (restaurant_XXXXX)
                
                QUAN TR·ªåNG:
                - LU√îN LU√îN s·ª≠ d·ª•ng ID t·ª´ d·ªØ li·ªáu ƒë·∫ßu v√†o (accommodation_id, place_id, restaurant_id)
                - Kh√¥ng t·∫°o ID t√πy √Ω m√† ph·∫£i d√πng nh·ªØng ID ƒë√£ ƒë∆∞·ª£c cung c·∫•p trong d·ªØ li·ªáu
                - M·ªói SEGMENT (morning, afternoon, evening) C√ì TH·ªÇ c√≥ NHI·ªÄU ACTIVITIES (2-3 activities m·ªói segment)
                - C√°c activities trong c√πng m·ªôt segment n√™n c√≥ m·ªëi li√™n h·ªá v·ªÅ ƒë·ªãa l√Ω (g·∫ßn nhau) v√† th·ªùi gian (li·ªÅn m·∫°ch)
                - N·∫øu description c√≥ trong d·ªØ li·ªáu ƒë·∫ßu v√†o, H√ÉY S·ª¨ D·ª§NG description ƒë√≥, v√† th√™m gi·ªçng vƒÉn h∆∞·ªõng d·∫´n vi√™n du l·ªãch (vd: "B·∫°n s·∫Ω ƒë∆∞·ª£c...", "Ch√∫ng ta s·∫Ω...", "H√£y c√πng kh√°m ph√°...")
                - Ch·ªâ tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá, kh√¥ng vi·∫øt g√¨ th√™m.
                """
                
                # Generate response for this day
                messages = [
                    {"role": "system", "content": system_prompt},
                    {"role": "user", "content": day_prompt}
                ]
                
                day_response = self.llm.invoke(messages)
                
                try:
                    # Try to parse the day's data, handling any potential errors
                    try:
                        # First attempt to parse directly
                        day_data = self.parser.parse(day_response)
                    except Exception as json_error:
                        # If that fails, attempt to find and extract a JSON object from the response
                        log.warning(f"Initial JSON parsing failed: {json_error}. Attempting to extract JSON.")
                        import re
                        import json
                        
                        # Find JSON-like content (anything between curly braces, including nested)
                        json_pattern = r'\{(?:[^{}]|(?R))*\}'
                        json_matches = re.finditer(json_pattern, day_response)
                        
                        # Get the longest match (likely the most complete JSON)
                        longest_match = None
                        max_length = 0
                        for match in json_matches:
                            if len(match.group(0)) > max_length:
                                max_length = len(match.group(0))
                                longest_match = match.group(0)
                        
                        if longest_match:
                            try:
                                # Try to parse the extracted JSON
                                day_data = json.loads(longest_match)
                            except json.JSONDecodeError:
                                # If still invalid, try to fix common issues
                                try:
                                    # Remove any trailing commas before closing braces
                                    fixed_json = re.sub(r',(\s*[}\]])', r'\1', longest_match)
                                    # Fix any unclosed quotes
                                    fixed_json = re.sub(r'([^"])"([^"]*?)([^"])\s*[}\]]', r'\1"\2\3"\4', fixed_json)
                                    # Try parsing again
                                    day_data = json.loads(fixed_json)
                                except:
                                    log.error(f"Could not repair JSON: {longest_match[:100]}...")
                                    raise ValueError("Could not extract valid JSON after repair attempts")
                        else:
                            log.error("No JSON-like content found in response. Creating basic structure.")
                            day_data = {
                                "date": current_date_str,
                                "day_title": f"Ng√†y {day_num+1}: Kh√°m ph√°",
                                "segments": [
                                    {"time_of_day": "morning", "activities": []},
                                    {"time_of_day": "afternoon", "activities": []},
                                    {"time_of_day": "evening", "activities": []}
                                ]
                            }
                    
                    if "segments" not in day_data or not day_data["segments"]:
                        day_data["segments"] = []
                    
                    existing_segments = {segment.get("time_of_day"): segment for segment in day_data["segments"]}
                    
                    # Check for required segments and add if missing
                    for required_segment in ["morning", "afternoon", "evening"]:
                        if required_segment not in existing_segments:
                            # Define a helper function to extract image URL from various formats
                            def extract_image_url(item):
                                # Check if there's a direct image_url string
                                if isinstance(item.get("image_url"), str) and item.get("image_url"):
                                    return item.get("image_url")
                                
                                # Check alternative direct image fields
                                if isinstance(item.get("imageUrl"), str) and item.get("imageUrl"):
                                    return item.get("imageUrl")
                                if isinstance(item.get("image"), str) and item.get("image"):
                                    return item.get("image")
                                
                                # Check for array-based image fields
                                for field in ["image_url", "imageUrl", "image", "images"]:
                                    # If the field exists and is a list/array
                                    if isinstance(item.get(field), list) and len(item.get(field)) > 0:
                                        first_image = item.get(field)[0]
                                        # If the item is a string, use it directly
                                        if isinstance(first_image, str):
                                            return first_image
                                        # If the item is a dict with a url field
                                        elif isinstance(first_image, dict) and first_image.get("url"):
                                            return first_image.get("url")
                                
                                # Nothing found
                                return ""

                            if required_segment not in existing_segments:
                                # Create a basic segment with default activity
                                default_activity = {}
                                if required_segment == "morning" and merged_data.get("accommodations"):
                                    # Get accommodation ID first
                                    accommodation_id = merged_data["accommodations"][0].get("accommodation_id", merged_data["accommodations"][0].get("id", f"hotel_morning_day{day_num+1}"))
                                    
                                    # Print all accommodation IDs for debugging
                                    log.info(f"Available accommodation IDs: {[a.get('accommodation_id', a.get('id', 'unknown')) for a in merged_data.get('accommodations', [])]}")
                                    log.info(f"Looking for accommodation ID: {accommodation_id}")
                                    
                                    # Find the matching accommodation to get complete data
                                    matching_accommodation = None
                                    for acc in merged_data.get("accommodations", []):
                                        # Check for exact matches first
                                        if acc.get("accommodation_id") == accommodation_id or acc.get("id") == accommodation_id:
                                            matching_accommodation = acc
                                            log.info(f"Found exact match for accommodation ID: {accommodation_id}")
                                            break
                                        
                                        # If the accommodation_id contains the ID (e.g., "hotel_123" contains "123")
                                        elif accommodation_id and acc.get("accommodation_id") and accommodation_id in acc.get("accommodation_id"):
                                            matching_accommodation = acc
                                            log.info(f"Found partial match: {accommodation_id} in {acc.get('accommodation_id')}")
                                            break
                                        elif accommodation_id and acc.get("id") and accommodation_id in acc.get("id"):
                                            matching_accommodation = acc
                                            log.info(f"Found partial match: {accommodation_id} in {acc.get('id')}")
                                            break
                                    
                                    # If no match found, use the first one
                                    if not matching_accommodation and merged_data.get("accommodations"):
                                        matching_accommodation = merged_data["accommodations"][0]
                                        log.info(f"No match found, using first accommodation")
                                    
                                    # Log the matched accommodation for debugging
                                    log.info(f"Matched accommodation: {matching_accommodation}")
                                    
                                    # Extract image URL
                                    image_url = ""
                                    if matching_accommodation:
                                        image_url = extract_image_url(matching_accommodation)
                                        log.info(f"Extracted accommodation image URL: {image_url}")
                                    
                                    # Process description - add tour guide style narration
                                    original_description = matching_accommodation.get("description", "")
                                    if original_description:
                                        # S·ª≠ d·ª•ng n·ªôi dung t·ª´ original_description nh∆∞ng ƒë·ªÉ model t·ª± vi·∫øt l·∫°i
                                        # v·ªõi gi·ªçng vƒÉn h∆∞·ªõng d·∫´n vi√™n du l·ªãch
                                        key_points = original_description[:200] if len(original_description) > 200 else original_description
                                        description = f"T·∫°i kh√°ch s·∫°n tuy·ªát v·ªùi n√†y, b·∫°n s·∫Ω ƒë∆∞·ª£c t·∫≠n h∆∞·ªüng {key_points.split('.')[0].lower() if '.' in key_points else key_points.lower()}. H√£y ngh·ªâ ng∆°i v√† chu·∫©n b·ªã cho nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi ti·∫øp theo!"
                                    else:
                                        description = "Ch√∫ng t√¥i s·∫Ω ƒë∆∞a b·∫°n ƒë·∫øn kh√°ch s·∫°n tho·∫£i m√°i n√†y ƒë·ªÉ ngh·ªâ ng∆°i v√† chu·∫©n b·ªã cho h√†nh tr√¨nh kh√°m ph√°. T·∫°i ƒë√¢y b·∫°n s·∫Ω ƒë∆∞·ª£c t·∫≠n h∆∞·ªüng d·ªãch v·ª• chu ƒë√°o v√† ti·ªán nghi hi·ªán ƒë·∫°i."
                                    
                                    default_activity = {
                                        "id": accommodation_id,
                                        "type": "accommodation",
                                        "name": matching_accommodation.get("name", merged_data["accommodations"][0].get("name", "Kh√°ch s·∫°n")) if matching_accommodation else merged_data["accommodations"][0].get("name", "Kh√°ch s·∫°n"),
                                        "start_time": "08:00",
                                        "end_time": "10:00",
                                        "description": description,
                                        "location": matching_accommodation.get("location", matching_accommodation.get("address", merged_data["accommodations"][0].get("location", merged_data["accommodations"][0].get("address", "")))) if matching_accommodation else merged_data["accommodations"][0].get("location", merged_data["accommodations"][0].get("address", "")),
                                        "rating": float(matching_accommodation.get("rating", merged_data["accommodations"][0].get("rating", 4.5))) if matching_accommodation else float(merged_data["accommodations"][0].get("rating", 4.5)),
                                        "price": float(matching_accommodation.get("price", merged_data["accommodations"][0].get("price", 850000))) if matching_accommodation else float(merged_data["accommodations"][0].get("price", 850000)),
                                        "image_url": image_url,
                                        "booking_link": matching_accommodation.get("booking_link", merged_data["accommodations"][0].get("booking_link", "")) if matching_accommodation else merged_data["accommodations"][0].get("booking_link", ""),
                                        "room_info": matching_accommodation.get("room_info", merged_data["accommodations"][0].get("room_info", "Ph√≤ng ti√™u chu·∫©n, 2 gi∆∞·ªùng")) if matching_accommodation else merged_data["accommodations"][0].get("room_info", "Ph√≤ng ti√™u chu·∫©n, 2 gi∆∞·ªùng"),
                                        "tax_info": matching_accommodation.get("tax_info", merged_data["accommodations"][0].get("tax_info", "ƒê√£ bao g·ªìm thu·∫ø VAT")) if matching_accommodation else merged_data["accommodations"][0].get("tax_info", "ƒê√£ bao g·ªìm thu·∫ø VAT"),
                                        "elderly_friendly": matching_accommodation.get("elderly_friendly", merged_data["accommodations"][0].get("elderly_friendly", True)) if matching_accommodation else merged_data["accommodations"][0].get("elderly_friendly", True),
                                        "url": matching_accommodation.get("url", matching_accommodation.get("link", merged_data["accommodations"][0].get("url", merged_data["accommodations"][0].get("link", "")))) if matching_accommodation else merged_data["accommodations"][0].get("url", merged_data["accommodations"][0].get("link", ""))
                                    }
                                elif required_segment == "afternoon" and merged_data.get("places"):
                                    place_index = min(day_num, len(merged_data["places"])-1) if merged_data["places"] else 0
                                    if place_index >= 0 and merged_data["places"]:
                                        # Get place ID first
                                        place_id = merged_data["places"][place_index].get("place_id", merged_data["places"][place_index].get("id", f"place_afternoon_day{day_num+1}"))
                                        
                                        # Print all place IDs for debugging
                                        log.info(f"Available place IDs: {[p.get('place_id', p.get('id', 'unknown')) for p in merged_data.get('places', [])]}")
                                        log.info(f"Looking for place ID: {place_id}")
                                        
                                        # Find the matching place to get complete data
                                        matching_place = None
                                        for place in merged_data.get("places", []):
                                            # Check for exact matches first
                                            if place.get("place_id") == place_id or place.get("id") == place_id:
                                                matching_place = place
                                                log.info(f"Found exact match for place ID: {place_id}")
                                                break
                                            
                                            # If the place_id contains the ID (e.g., "place_123" contains "123")
                                            elif place_id and place.get("place_id") and place_id in place.get("place_id"):
                                                matching_place = place
                                                log.info(f"Found partial match: {place_id} in {place.get('place_id')}")
                                                break
                                            elif place_id and place.get("id") and place_id in place.get("id"):
                                                matching_place = place
                                                log.info(f"Found partial match: {place_id} in {place.get('id')}")
                                                break
                                        
                                        # If no match found, use the one at place_index
                                        if not matching_place:
                                            matching_place = merged_data["places"][place_index]
                                            log.info(f"No match found, using place at index {place_index}")
                                        
                                        # Log the matched place for debugging
                                        log.info(f"Matched place: {matching_place}")
                                        
                                        # Extract image URL
                                        image_url = ""
                                        if matching_place:
                                            image_url = extract_image_url(matching_place)
                                            log.info(f"Extracted place image URL: {image_url}")
                                        
                                        # Process description - add tour guide style narration
                                        original_description = matching_place.get("description", "")
                                        if original_description:
                                            # S·ª≠ d·ª•ng n·ªôi dung t·ª´ original_description nh∆∞ng ƒë·ªÉ model t·ª± vi·∫øt l·∫°i
                                            # v·ªõi gi·ªçng vƒÉn h∆∞·ªõng d·∫´n vi√™n du l·ªãch
                                            key_points = original_description[:200] if len(original_description) > 200 else original_description
                                            description = f"B·∫°n s·∫Ω ƒë∆∞·ª£c kh√°m ph√° ƒë·ªãa ƒëi·ªÉm tuy·ªát v·ªùi n√†y, n∆°i {key_points.split('.')[0].lower() if '.' in key_points else key_points.lower()}. Ch√∫ng ta s·∫Ω c√πng nhau t√¨m hi·ªÉu v·ªÅ vƒÉn h√≥a v√† l·ªãch s·ª≠ ƒë·ªôc ƒë√°o c·ªßa n∆°i ƒë√¢y."
                                        else:
                                            description = "Tham quan ƒë·ªãa ƒëi·ªÉm n·ªïi ti·∫øng n√†y, b·∫°n s·∫Ω ƒë∆∞·ª£c tr·∫£i nghi·ªám v·∫ª ƒë·∫πp ƒë·∫∑c tr∆∞ng c·ªßa ƒë·ªãa ph∆∞∆°ng v√† kh√°m ph√° nh·ªØng n√©t vƒÉn h√≥a ƒë·ªôc ƒë√°o kh√¥ng th·ªÉ b·ªè qua."
                                        
                                        default_activity = {
                                            "id": place_id,
                                            "type": "place",
                                            "name": matching_place.get("name", "ƒê·ªãa ƒëi·ªÉm tham quan"),
                                            "start_time": "14:00",
                                            "end_time": "16:00",
                                            "description": description,
                                            "address": matching_place.get("address", matching_place.get("location", "")),
                                            "categories": matching_place.get("categories", "sightseeing"),
                                            "duration": matching_place.get("duration", "2h"),
                                            "opening_hours": matching_place.get("opening_hours", "08:00-17:00"),
                                            "rating": float(matching_place.get("rating", 4.0)),
                                            "price": float(matching_place.get("price", 50000)) if matching_place.get("price") else "",
                                            "image_url": image_url,
                                            "url": matching_place.get("url", matching_place.get("link", ""))
                                        }
                                elif required_segment == "evening" and merged_data.get("restaurants"):
                                    rest_index = min(day_num, len(merged_data["restaurants"])-1) if merged_data["restaurants"] else 0
                                    if rest_index >= 0 and merged_data["restaurants"]:
                                        # Get restaurant ID first
                                        restaurant_id = merged_data["restaurants"][rest_index].get("restaurant_id", merged_data["restaurants"][rest_index].get("id", f"restaurant_evening_day{day_num+1}"))
                                        
                                        # Print all restaurant IDs for debugging
                                        log.info(f"Available restaurant IDs: {[r.get('restaurant_id', r.get('id', 'unknown')) for r in merged_data.get('restaurants', [])]}")
                                        log.info(f"Looking for restaurant ID: {restaurant_id}")
                                        
                                        # Find the matching restaurant to get complete data
                                        matching_restaurant = None
                                        for restaurant in merged_data.get("restaurants", []):
                                            # Check for exact matches first
                                            if restaurant.get("restaurant_id") == restaurant_id or restaurant.get("id") == restaurant_id:
                                                matching_restaurant = restaurant
                                                log.info(f"Found exact match for restaurant ID: {restaurant_id}")
                                                break
                                            
                                            # If the restaurant_id contains the ID (e.g., "restaurant_123" contains "123")
                                            elif restaurant_id and restaurant.get("restaurant_id") and restaurant_id in restaurant.get("restaurant_id"):
                                                matching_restaurant = restaurant
                                                log.info(f"Found partial match: {restaurant_id} in {restaurant.get('restaurant_id')}")
                                                break
                                            elif restaurant_id and restaurant.get("id") and restaurant_id in restaurant.get("id"):
                                                matching_restaurant = restaurant
                                                log.info(f"Found partial match: {restaurant_id} in {restaurant.get('id')}")
                                                break
                                        
                                        # If no match found, use the one at rest_index
                                        if not matching_restaurant:
                                            matching_restaurant = merged_data["restaurants"][rest_index]
                                            log.info(f"No match found, using restaurant at index {rest_index}")
                                        
                                        # Log the matched restaurant for debugging
                                        log.info(f"Matched restaurant: {matching_restaurant}")
                                        
                                        # Extract image URL
                                        image_url = ""
                                        if matching_restaurant:
                                            image_url = extract_image_url(matching_restaurant)
                                            log.info(f"Extracted restaurant image URL: {image_url}")
                                        
                                        # Process description - add tour guide style narration
                                        original_description = matching_restaurant.get("description", "")
                                        if original_description:
                                            # S·ª≠ d·ª•ng n·ªôi dung t·ª´ original_description nh∆∞ng ƒë·ªÉ model t·ª± vi·∫øt l·∫°i
                                            # v·ªõi gi·ªçng vƒÉn h∆∞·ªõng d·∫´n vi√™n du l·ªãch
                                            key_points = original_description[:200] if len(original_description) > 200 else original_description
                                            description = f"H√£y c√πng th∆∞·ªüng th·ª©c b·ªØa ƒÉn tuy·ªát v·ªùi t·∫°i nh√† h√†ng ƒë·∫∑c bi·ªát n√†y, n∆°i {key_points.split('.')[0].lower() if '.' in key_points else key_points.lower()}. B·∫°n s·∫Ω ƒë∆∞·ª£c tr·∫£i nghi·ªám nh·ªØng h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng c·ªßa ·∫©m th·ª±c ƒë·ªãa ph∆∞∆°ng."
                                        else:
                                            description = "H√£y c√πng nhau th∆∞·ªüng th·ª©c nh·ªØng m√≥n ƒÉn ƒë·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng t·∫°i nh√† h√†ng n·ªïi ti·∫øng n√†y. B·∫°n s·∫Ω ƒë∆∞·ª£c ƒë·∫Øm m√¨nh trong h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng kh√¥ng th·ªÉ t√¨m th·∫•y ·ªü n∆°i n√†o kh√°c."
                                        
                                        default_activity = {
                                            "id": restaurant_id,
                                            "type": "restaurant",
                                            "name": matching_restaurant.get("name", "Nh√† h√†ng"),
                                            "start_time": "19:00",
                                            "end_time": "21:00",
                                            "description": description,
                                            "address": matching_restaurant.get("address", matching_restaurant.get("location", "")),
                                            "cuisines": matching_restaurant.get("cuisines", "ƒê·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng"),
                                            "price_range": matching_restaurant.get("price_range", "100,000-300,000 VND"),
                                            "rating": float(matching_restaurant.get("rating", 4.2)),
                                            "phone": matching_restaurant.get("phone", ""),
                                            "services": matching_restaurant.get("services", ["ƒë·∫∑t b√†n"]),
                                            "image_url": image_url,
                                            "url": matching_restaurant.get("url", matching_restaurant.get("link", ""))
                                        }
                            
                            # Only add if we have a valid default activity
                            if default_activity:
                                day_data["segments"].append({
                                    "time_of_day": required_segment,
                                    "activities": [default_activity]
                                })
                            else:
                                # Add empty segment if no default activity can be created
                                day_data["segments"].append({
                                    "time_of_day": required_segment,
                                    "activities": []
                                })
                    
                    # Add to the final plan
                    final_plan["plan_by_day"].append(day_data)
                except Exception as e:
                    log.error(f"Error parsing day {day_num+1} data: {e}")
                    # Create a basic day structure
                    basic_day = {
                        "date": current_date_str,
                        "day_title": day_title,
                        "segments": [
                            {"time_of_day": "morning", "activities": []},
                            {"time_of_day": "afternoon", "activities": []},
                            {"time_of_day": "evening", "activities": []}
                        ]
                    }
                    final_plan["plan_by_day"].append(basic_day)
            
            return final_plan
            
        except Exception as e:
            log.error(f"Error in generate_plan: {e}")
            log.debug(f"Input data: {input_data}")
            log.debug(f"Meta data: {meta}")
            
            # Return a basic structure in case of error
            from datetime import datetime
            return {
                "error": str(e),
                "trip_name": input_data.get("trip_name", meta.get("trip_name", "Trip Plan")),
                "start_date": datetime.now().strftime("%Y-%m-%d"),
                "end_date": (datetime.now() + timedelta(days=2)).strftime("%Y-%m-%d"),
                "destination": input_data.get("destination", meta.get("destination", "Unknown")),
                "plan_by_day": []
            }

    # ------------------------------------------------------------------
    # ü§ñ  Agent‚Äëbased generation (tool‚Äëready)
    # ------------------------------------------------------------------
    def generate_plan_with_tools(
        self, input_data: Dict[str, Any], **meta: Any
    ) -> Dict[str, Any]:
        """Agent that can call external tools (weather, maps, etc.)."""
        log.info("Generating plan with agent/tools‚Ä¶")
        
        try:
            # Create a merged data dictionary with meta information
            merged_data = {**input_data, **meta}
            
            # Ensure trip_name exists in the data
            if "trip_name" not in merged_data:
                merged_data["trip_name"] = "Trip to " + merged_data.get("destination", "Unknown")
                
            # Calculate number of days based on start and end dates
            try:
                from datetime import datetime, timedelta
                
                # Set default dates if not provided
                if not merged_data.get('start_date'):
                    start_date = datetime.now()
                    merged_data['start_date'] = start_date.strftime("%Y-%m-%d")
                else:
                    start_date = datetime.strptime(merged_data['start_date'], "%Y-%m-%d")
                
                if not merged_data.get('end_date'):
                    end_date = start_date + timedelta(days=2)  # Default 3-day trip
                    merged_data['end_date'] = end_date.strftime("%Y-%m-%d")
                else:
                    end_date = datetime.strptime(merged_data['end_date'], "%Y-%m-%d")
                
                num_days = (end_date - start_date).days + 1
                if num_days < 1:
                    num_days = 1
                    end_date = start_date
                    merged_data['end_date'] = end_date.strftime("%Y-%m-%d")
            except Exception as date_error:
                # Default to 3 days if dates are invalid or not provided
                log.warning(f"Date parsing error: {date_error}. Using default dates.")
                from datetime import datetime, timedelta
                num_days = 3
                start_date = datetime.now()
                end_date = start_date + timedelta(days=num_days-1)
                merged_data['start_date'] = start_date.strftime("%Y-%m-%d")
                merged_data['end_date'] = end_date.strftime("%Y-%m-%d")
                
            # Initialize the agent
            agent = initialize_agent(
                TOOLS, self.llm, agent="zero-shot-react-description", verbose=False
            )
            
            # Initialize the final plan with basic information
            final_plan = {
                "trip_name": merged_data.get("trip_name", "Trip to " + merged_data.get("destination", "Unknown")),
                "start_date": merged_data.get("start_date"),
                "end_date": merged_data.get("end_date"),
                "user_id": merged_data.get("user_id", "user123"),
                "destination": merged_data.get("destination", "Unknown"),
                "plan_by_day": []
            }
            
            # System prompt for more control
            system_prompt = """
            You are an expert Vietnamese travel planner specialized in creating detailed, engaging travel itineraries.
            Your recommendations should be specific, authentic, and tailored to the provided data.
            Follow these guidelines:
            1. You are an expert Vietnamese travel planner specialized in creating detailed, engaging travel itineraries.
            2. You must choose for the user the hotel first, to make sure that they can have a suitable hotel. If the next activities is far from the chosen hotel, you must choose another hotel.
            3. Create detailed descriptions in Vietnamese with TOUR GUIDE STYLE language (vd: "B·∫°n s·∫Ω ƒë∆∞·ª£c kh√°m ph√°...", "H√£y c√πng th∆∞·ªüng th·ª©c...", "Ch√∫ng ta s·∫Ω tham quan...")
            4. Suggest realistic timings based on location proximity
            5. Include both popular attractions and hidden gems
            6. Consider weather, local events, and seasonal factors
            7. Provide practical tips for transportation between locations
            8. Return ONLY a valid JSON object that exactly matches the requested structure
            9. Use available tools when appropriate to enhance your recommendations
            10. IMPORTANT: Make sure to include only complete, valid JSON - do not cut off any fields or values
            11. M·ªói ph√¢n ƒëo·∫°n (morning, afternoon, evening) n√™n c√≥ 2-3 ho·∫°t ƒë·ªông li√™n quan v√† h·ª£p l√Ω v·ªÅ m·∫∑t th·ªùi gian v√† ƒë·ªãa l√Ω
            """
            
            # Generate each day individually
            for day_num in range(num_days):
                current_date = start_date + timedelta(days=day_num)
                current_date_str = current_date.strftime("%Y-%m-%d")
                
                day_title = f"Ng√†y {day_num+1}: "
                if day_num == 0:
                    day_title += "Kh√°m ph√° bi·ªÉn"
                elif day_num == 1:
                    day_title += "Kh√°m ph√° n√∫i"
                elif day_num == 2:
                    day_title += "Kh√°m ph√° vƒÉn h√≥a"
                else:
                    day_title += "Kh√°m ph√° ƒë·ªãa ph∆∞∆°ng"
                
                # Create prompt for this specific day with simplified structure
                day_prompt = f"""
                T·∫°o chi ti·∫øt cho ng√†y {day_num+1} (ng√†y {current_date_str}) c·ªßa l·ªãch tr√¨nh du l·ªãch {merged_data.get("destination")}.
                H√£y t·∫°o 3 segments (morning, afternoon, evening) v·ªõi C√ÅC ho·∫°t ƒë·ªông ph√π h·ª£p.
                
                Th√¥ng tin chuy·∫øn ƒëi:
                ƒêi·ªÉm ƒë·∫øn: {merged_data.get("destination")}
                Kh√°ch s·∫°n: {[(acc.get("name", ""), acc.get("accommodation_id", "")) for acc in merged_data.get("accommodations", [])]}
                ƒê·ªãa ƒëi·ªÉm quan t√¢m: {[(place.get("name", ""), place.get("place_id", "")) for place in merged_data.get("places", [])]}
                Nh√† h√†ng: {[(rest.get("name", ""), rest.get("restaurant_id", "")) for rest in merged_data.get("restaurants", [])]}
                
                QUAN TR·ªåNG: Tr·∫£ l·ªùi d∆∞·ªõi d·∫°ng ƒë·ªëi t∆∞·ª£ng JSON ƒë·∫ßy ƒë·ªß, c√≥ c·∫•u tr√∫c ch√≠nh x√°c nh∆∞ sau:
                {{
                    "date": "{current_date_str}",
                    "day_title": "{day_title}",
                    "segments": [
                        {{
                            "time_of_day": "morning",
                            "activities": [
                                {{
                                    "id": "{merged_data.get('places', [{}])[0].get('place_id', 'place_morning_day' + str(day_num+1)) if merged_data.get('places') else 'place_morning_day' + str(day_num+1)}",
                                    "type": "place",
                                    "name": "T√™n ƒë·ªãa ƒëi·ªÉm",
                                    "start_time": "08:00",
                                    "end_time": "10:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                                    "categories": "sightseeing",
                                    "duration": "2h",
                                    "opening_hours": "08:00-17:00",
                                    "rating": 4.5,
                                    "price": 50000,
                                    "image_url": "",
                                    "url": ""
                                }},
                                {{
                                    "id": "{merged_data.get('places', [{}])[min(1, len(merged_data.get('places', []))-1)].get('place_id', 'place_morning2_day' + str(day_num+1)) if len(merged_data.get('places', [])) > 1 else 'place_morning2_day' + str(day_num+1)}",
                                    "type": "place",
                                    "name": "T√™n ƒë·ªãa ƒëi·ªÉm th·ª© 2",
                                    "start_time": "10:30",
                                    "end_time": "12:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                                    "categories": "sightseeing",
                                    "duration": "1h30m",
                                    "opening_hours": "08:00-17:00",
                                    "rating": 4.5,
                                    "price": 50000,
                                    "image_url": "",
                                    "url": ""
                                }},
                                {{
                                    "id": "{merged_data.get('restaurants', [{}])[min(0, len(merged_data.get('restaurants', []))-1)].get('restaurant_id', 'restaurant_morning_day' + str(day_num+1)) if merged_data.get('restaurants') else 'restaurant_morning_day' + str(day_num+1)}",
                                    "type": "restaurant",
                                    "name": "ƒÇn s√°ng",
                                    "start_time": "07:00",
                                    "end_time": "08:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß", 
                                    "cuisines": "·∫®m th·ª±c ƒë·ªãa ph∆∞∆°ng",
                                    "price_range": "50,000-100,000 VND",
                                    "rating": 4.5,
                                    "phone": "0123456789",
                                    "services": ["ƒë·∫∑t b√†n", "giao h√†ng"],
                                    "image_url": "",
                                    "url": ""
                                }}
                            ]
                        }},
                        {{
                            "time_of_day": "afternoon",
                            "activities": [
                                {{
                                    "id": "{merged_data.get('places', [{}])[min(2, len(merged_data.get('places', []))-1)].get('place_id', 'place_afternoon_day' + str(day_num+1)) if len(merged_data.get('places', [])) > 2 else 'place_afternoon_day' + str(day_num+1)}",
                                    "type": "place",
                                    "name": "T√™n ƒë·ªãa ƒëi·ªÉm",
                                    "start_time": "13:00",
                                    "end_time": "15:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                                    "categories": "sightseeing",
                                    "duration": "2h",
                                    "opening_hours": "08:00-17:00",
                                    "rating": 4.5,
                                    "price": 50000,
                                    "image_url": "",
                                    "url": ""
                                }},
                                {{
                                    "id": "{merged_data.get('places', [{}])[min(3, len(merged_data.get('places', []))-1)].get('place_id', 'place_afternoon2_day' + str(day_num+1)) if len(merged_data.get('places', [])) > 3 else 'place_afternoon2_day' + str(day_num+1)}",
                                    "type": "place",
                                    "name": "T√™n ƒë·ªãa ƒëi·ªÉm th·ª© 2",
                                    "start_time": "15:30",
                                    "end_time": "17:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                                    "categories": "sightseeing",
                                    "duration": "1h30m",
                                    "opening_hours": "08:00-17:00",
                                    "rating": 4.5,
                                    "price": 50000,
                                    "image_url": "",
                                    "url": ""
                                }},
                                {{
                                    "id": "{merged_data.get('restaurants', [{}])[min(1, len(merged_data.get('restaurants', []))-1)].get('restaurant_id', 'restaurant_afternoon_day' + str(day_num+1)) if len(merged_data.get('restaurants', [])) > 1 else merged_data.get('restaurants', [{}])[0].get('restaurant_id', 'restaurant_afternoon_day' + str(day_num+1)) if merged_data.get('restaurants') else 'restaurant_afternoon_day' + str(day_num+1)}",
                                    "type": "restaurant",
                                    "name": "ƒÇn tr∆∞a",
                                    "start_time": "12:00",
                                    "end_time": "13:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß", 
                                    "cuisines": "H·∫£i s·∫£n, ƒê·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng",
                                    "price_range": "100,000-300,000 VND",
                                    "rating": 4.5,
                                    "phone": "0123456789",
                                    "services": ["ƒë·∫∑t b√†n", "giao h√†ng"],
                                    "image_url": "",
                                    "url": ""
                                }}
                            ]
                        }},
                        {{
                            "time_of_day": "evening",
                            "activities": [
                                {{
                                    "id": "{merged_data.get('places', [{}])[min(4, len(merged_data.get('places', []))-1)].get('place_id', 'place_evening_day' + str(day_num+1)) if len(merged_data.get('places', [])) > 4 else 'place_evening_day' + str(day_num+1)}",
                                    "type": "place",
                                    "name": "ƒê·ªãa ƒëi·ªÉm bu·ªïi t·ªëi",
                                    "start_time": "18:00",
                                    "end_time": "19:00",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                                    "categories": "sightseeing",
                                    "duration": "1h",
                                    "opening_hours": "08:00-21:00",
                                    "rating": 4.5,
                                    "price": 50000,
                                    "image_url": "",
                                    "url": ""
                                }},
                                {{
                                    "id": "{merged_data.get('places', [{}])[min(5, len(merged_data.get('places', []))-1)].get('place_id', 'place_evening2_day' + str(day_num+1)) if len(merged_data.get('places', [])) > 5 else 'place_evening2_day' + str(day_num+1)}",
                                    "type": "place",
                                    "name": "ƒê·ªãa ƒëi·ªÉm th·ª© 2 bu·ªïi t·ªëi",
                                    "start_time": "19:30",
                                    "end_time": "20:30",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß",
                                    "categories": "entertainment",
                                    "duration": "1h",
                                    "opening_hours": "18:00-23:00",
                                    "rating": 4.5,
                                    "price": 50000,
                                    "image_url": "",
                                    "url": ""
                                }},
                                {{
                                    "id": "{merged_data.get('restaurants', [{}])[min(2, len(merged_data.get('restaurants', []))-1)].get('restaurant_id', 'restaurant_evening_day' + str(day_num+1)) if len(merged_data.get('restaurants', [])) > 2 else merged_data.get('restaurants', [{}])[0].get('restaurant_id', 'restaurant_evening_day' + str(day_num+1)) if merged_data.get('restaurants') else 'restaurant_evening_day' + str(day_num+1)}",
                                    "type": "restaurant",
                                    "name": "Nh√† h√†ng t·ªëi",
                                    "start_time": "20:30",
                                    "end_time": "22:30",
                                    "description": "M√¥ t·∫£ ng·∫Øn",
                                    "address": "ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß", 
                                    "cuisines": "H·∫£i s·∫£n, ƒê·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng",
                                    "price_range": "100,000-300,000 VND",
                                    "rating": 4.5,
                                    "phone": "0123456789",
                                    "services": ["ƒë·∫∑t b√†n", "giao h√†ng"],
                                    "image_url": "",
                                    "url": ""
                                }}
                            ]
                        }}
                    ]
                }}
                
                H√£y chu·∫©n h√≥a ƒë·ªãnh d·∫°ng d·ªØ li·ªáu theo TYPE c·ªßa activity:
                1. N·∫øu type l√† "accommodation":
                   - B·ªï sung: "booking_link", "room_info", "tax_info", "elderly_friendly"
                   - ƒê·ªïi "address" th√†nh "location"
                   - Price n√™n l√† s·ªë nguy√™n (VND)
                   - S·ª≠ d·ª•ng ID t·ª´ danh s√°ch accommodation_id cung c·∫•p (hotel_XXXXX)
                
                2. N·∫øu type l√† "place":
                   - B·ªï sung: "categories", "duration", "opening_hours"
                   - Gi·ªØ nguy√™n "address"
                   - Price l√† s·ªë nguy√™n n·∫øu c√≥ (VND)
                   - S·ª≠ d·ª•ng ID t·ª´ danh s√°ch place_id cung c·∫•p (place_XXXXX)
                
                3. N·∫øu type l√† "restaurant":
                   - B·ªï sung: "cuisines", "price_range", "phone", "services" (array)
                   - Gi·ªØ nguy√™n "address"
                   - S·ª≠ d·ª•ng ID t·ª´ danh s√°ch restaurant_id cung c·∫•p (restaurant_XXXXX)
                
                QUAN TR·ªåNG:
                - LU√îN LU√îN s·ª≠ d·ª•ng ID t·ª´ d·ªØ li·ªáu ƒë·∫ßu v√†o (accommodation_id, place_id, restaurant_id)
                - Kh√¥ng t·∫°o ID t√πy √Ω m√† ph·∫£i d√πng nh·ªØng ID ƒë√£ ƒë∆∞·ª£c cung c·∫•p trong d·ªØ li·ªáu
                - M·ªói SEGMENT (morning, afternoon, evening) PH·∫¢I c√≥ NHI·ªÄU ACTIVITIES (2-3 activities m·ªói segment)
                - C√°c activities trong c√πng m·ªôt segment n√™n c√≥ m·ªëi li√™n h·ªá v·ªÅ ƒë·ªãa l√Ω (g·∫ßn nhau) v√† th·ªùi gian (li·ªÅn m·∫°ch)
                - Khi vi·∫øt description, H√ÉY T·∫†O RA M√î T·∫¢ S√ÅNG T·∫†O v·ªõi gi·ªçng vƒÉn h∆∞·ªõng d·∫´n vi√™n du l·ªãch, d·ª±a tr√™n th√¥ng tin t·ª´ input data (n·∫øu c√≥) nh∆∞ng ƒë·ªãnh d·∫°ng l·∫°i v√† l√†m phong ph√∫ th√™m
                - Description n√™n c√≥ phong c√°ch c·ªßa h∆∞·ªõng d·∫´n vi√™n du l·ªãch nh∆∞: "B·∫°n s·∫Ω ƒë∆∞·ª£c kh√°m ph√°..." ho·∫∑c "Ch√∫ng ta s·∫Ω c√πng th∆∞·ªüng th·ª©c..."
                - Ch·ªâ tr·∫£ v·ªÅ ƒë·ªëi t∆∞·ª£ng JSON h·ª£p l·ªá, kh√¥ng vi·∫øt g√¨ th√™m.
                """
                
                # Th√™m adjustment cho start_time theo th·ªùi gian hi·ªán t·∫°i
                # Ki·ªÉm tra n·∫øu ƒë√¢y l√† ng√†y ƒë·∫ßu ti√™n
                if day_num == 0:
                    try:
                        from datetime import datetime
                        current_hour = datetime.now().hour
                        adjusted_times, current_segment = self._get_appropriate_start_times(current_hour)
                        
                        # N·∫øu l√† bu·ªïi chi·ªÅu ho·∫∑c t·ªëi, b·ªï sung th√¥ng tin v√†o prompt
                        if current_segment in ["afternoon", "evening"]:
                            day_prompt += f"""
                            
                            L∆ØU √ù ƒê·∫∂C BI·ªÜT:
                            - Hi·ªán t·∫°i ƒë√£ l√† bu·ªïi {current_segment}, v√¨ v·∫≠y h√£y t·∫°o l·ªãch tr√¨nh b·∫Øt ƒë·∫ßu t·ª´ bu·ªïi {current_segment}
                            - C√°c ho·∫°t ƒë·ªông bu·ªïi {current_segment} n√™n b·∫Øt ƒë·∫ßu sau {current_hour+1}:00
                            - C√°c bu·ªïi tr∆∞·ªõc ƒë√≥ c√≥ th·ªÉ b·ªè qua ho·∫∑c ƒë·ªÉ tr·ªëng
                            """
                    except Exception as e:
                        log.warning(f"Kh√¥ng th·ªÉ ƒëi·ªÅu ch·ªânh th·ªùi gian b·∫Øt ƒë·∫ßu: {e}")

                # Th√™m h∆∞·ªõng d·∫´n cho prompt v·ªÅ vi·ªác t·∫°o description
                day_prompt += """
                
                H∆Ø·ªöNG D·∫™N V·ªÄ DESCRIPTION:
                - H√ÉY T·ª∞ VI·∫æT M√î T·∫¢ S√ÅNG T·∫†O v·ªõi gi·ªçng vƒÉn h∆∞·ªõng d·∫´n vi√™n du l·ªãch
                - KH√îNG copy m√¥ t·∫£ g·ªëc, nh∆∞ng l·∫•y √Ω t∆∞·ªüng v√† th√¥ng tin ch√≠nh t·ª´ ƒë√≥
                - M√¥ t·∫£ n√™n c√≥ phong c√°ch: "B·∫°n s·∫Ω ƒë∆∞·ª£c...", "Ch√∫ng ta s·∫Ω c√πng...", "H√£y kh√°m ph√°..."
                - N√™n t·∫°o ra m√¥ t·∫£ m·ªõi ho√†n to√†n, ƒë·ªô d√†i kho·∫£ng 2-3 c√¢u ng·∫Øn g·ªçn, s√∫c t√≠ch
                - M√¥ t·∫£ n√™n bao g·ªìm: ƒëi·ªÉm ƒë·∫∑c bi·ªát c·ªßa ƒë·ªãa ƒëi·ªÉm, tr·∫£i nghi·ªám du kh√°ch c√≥ th·ªÉ c√≥, v√† l√Ω do n√™n gh√© thƒÉm
                """
                
                try:
                    # Run the agent for this day
                    raw_day_response = agent.run(f"{system_prompt}\n\n{day_prompt}")
                    
                    # Try to parse the day's data, handling any potential errors
                    try:
                        # First attempt to parse directly
                        day_data = self.parser.parse(raw_day_response)
                    except Exception as json_error:
                        # If that fails, attempt to find and extract a JSON object from the response
                        log.warning(f"Initial JSON parsing failed: {json_error}. Attempting to extract JSON.")
                        import re
                        import json
                        
                        # Find JSON-like content (anything between curly braces, including nested)
                        json_pattern = r'\{(?:[^{}]|(?R))*\}'
                        json_matches = re.finditer(json_pattern, raw_day_response)
                        
                        # Get the longest match (likely the most complete JSON)
                        longest_match = None
                        max_length = 0
                        for match in json_matches:
                            if len(match.group(0)) > max_length:
                                max_length = len(match.group(0))
                                longest_match = match.group(0)
                        
                        if longest_match:
                            try:
                                # Try to parse the extracted JSON
                                day_data = json.loads(longest_match)
                            except json.JSONDecodeError:
                                # If still invalid, try to fix common issues
                                try:
                                    # Remove any trailing commas before closing braces
                                    fixed_json = re.sub(r',(\s*[}\]])', r'\1', longest_match)
                                    # Fix any unclosed quotes
                                    fixed_json = re.sub(r'([^"])"([^"]*?)([^"])\s*[}\]]', r'\1"\2\3"\4', fixed_json)
                                    # Try parsing again
                                    day_data = json.loads(fixed_json)
                                except:
                                    log.error(f"Could not repair JSON: {longest_match[:100]}...")
                                    raise ValueError("Could not extract valid JSON after repair attempts")
                        else:
                            log.error("No JSON-like content found in response. Creating basic structure.")
                            # Create basic structure using available data from input
                            day_data = {
                                "date": current_date_str,
                                "day_title": f"Ng√†y {day_num+1}: Kh√°m ph√°",
                                "segments": [
                                    {"time_of_day": "morning", "activities": []},
                                    {"time_of_day": "afternoon", "activities": []},
                                    {"time_of_day": "evening", "activities": []}
                                ]
                            }
                    
                    # Ensure the day has all required segments
                    if "segments" not in day_data or not day_data["segments"]:
                        day_data["segments"] = []
                    
                    existing_segments = {segment.get("time_of_day"): segment for segment in day_data["segments"]}
                    
                    # Check for required segments and add if missing
                    for required_segment in ["morning", "afternoon", "evening"]:
                        if required_segment not in existing_segments:
                            # Define a helper function to extract image URL from various formats
                            def extract_image_url(item):
                                # Check if there's a direct image_url string
                                if isinstance(item.get("image_url"), str) and item.get("image_url"):
                                    return item.get("image_url")
                                
                                # Check alternative direct image fields
                                if isinstance(item.get("imageUrl"), str) and item.get("imageUrl"):
                                    return item.get("imageUrl")
                                if isinstance(item.get("image"), str) and item.get("image"):
                                    return item.get("image")
                                
                                # Check for array-based image fields
                                for field in ["image_url", "imageUrl", "image", "images"]:
                                    # If the field exists and is a list/array
                                    if isinstance(item.get(field), list) and len(item.get(field)) > 0:
                                        first_image = item.get(field)[0]
                                        # If the item is a string, use it directly
                                        if isinstance(first_image, str):
                                            return first_image
                                        # If the item is a dict with a url field
                                        elif isinstance(first_image, dict) and first_image.get("url"):
                                            return first_image.get("url")
                                
                                # Nothing found
                                return ""

                            if required_segment not in existing_segments:
                                # Create a basic segment with default activity
                                default_activity = {}
                                if required_segment == "morning" and merged_data.get("accommodations"):
                                    # Get accommodation ID first
                                    accommodation_id = merged_data["accommodations"][0].get("accommodation_id", merged_data["accommodations"][0].get("id", f"hotel_morning_day{day_num+1}"))
                                    
                                    # Print all accommodation IDs for debugging
                                    log.info(f"Available accommodation IDs: {[a.get('accommodation_id', a.get('id', 'unknown')) for a in merged_data.get('accommodations', [])]}")
                                    log.info(f"Looking for accommodation ID: {accommodation_id}")
                                    
                                    # Find the matching accommodation to get complete data
                                    matching_accommodation = None
                                    for acc in merged_data.get("accommodations", []):
                                        # Check for exact matches first
                                        if acc.get("accommodation_id") == accommodation_id or acc.get("id") == accommodation_id:
                                            matching_accommodation = acc
                                            log.info(f"Found exact match for accommodation ID: {accommodation_id}")
                                            break
                                        
                                        # If the accommodation_id contains the ID (e.g., "hotel_123" contains "123")
                                        elif accommodation_id and acc.get("accommodation_id") and accommodation_id in acc.get("accommodation_id"):
                                            matching_accommodation = acc
                                            log.info(f"Found partial match: {accommodation_id} in {acc.get('accommodation_id')}")
                                            break
                                        elif accommodation_id and acc.get("id") and accommodation_id in acc.get("id"):
                                            matching_accommodation = acc
                                            log.info(f"Found partial match: {accommodation_id} in {acc.get('id')}")
                                            break
                                    
                                    # If no match found, use the first one
                                    if not matching_accommodation and merged_data.get("accommodations"):
                                        matching_accommodation = merged_data["accommodations"][0]
                                        log.info(f"No match found, using first accommodation")
                                    
                                    # Log the matched accommodation for debugging
                                    log.info(f"Matched accommodation: {matching_accommodation}")
                                    
                                    # Extract image URL
                                    image_url = ""
                                    if matching_accommodation:
                                        image_url = extract_image_url(matching_accommodation)
                                        log.info(f"Extracted accommodation image URL: {image_url}")
                                    
                                    # Process description - add tour guide style narration
                                    original_description = matching_accommodation.get("description", "")
                                    if original_description:
                                        # S·ª≠ d·ª•ng n·ªôi dung t·ª´ original_description nh∆∞ng ƒë·ªÉ model t·ª± vi·∫øt l·∫°i
                                        # v·ªõi gi·ªçng vƒÉn h∆∞·ªõng d·∫´n vi√™n du l·ªãch
                                        key_points = original_description[:200] if len(original_description) > 200 else original_description
                                        description = f"T·∫°i kh√°ch s·∫°n tuy·ªát v·ªùi n√†y, b·∫°n s·∫Ω ƒë∆∞·ª£c t·∫≠n h∆∞·ªüng {key_points.split('.')[0].lower() if '.' in key_points else key_points.lower()}. H√£y ngh·ªâ ng∆°i v√† chu·∫©n b·ªã cho nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi ti·∫øp theo!"
                                    else:
                                        description = "Ch√∫ng t√¥i s·∫Ω ƒë∆∞a b·∫°n ƒë·∫øn kh√°ch s·∫°n tho·∫£i m√°i n√†y ƒë·ªÉ ngh·ªâ ng∆°i v√† chu·∫©n b·ªã cho h√†nh tr√¨nh kh√°m ph√°. T·∫°i ƒë√¢y b·∫°n s·∫Ω ƒë∆∞·ª£c t·∫≠n h∆∞·ªüng d·ªãch v·ª• chu ƒë√°o v√† ti·ªán nghi hi·ªán ƒë·∫°i."
                                    
                                    default_activity = {
                                        "id": accommodation_id,
                                        "type": "accommodation",
                                        "name": matching_accommodation.get("name", merged_data["accommodations"][0].get("name", "Kh√°ch s·∫°n")) if matching_accommodation else merged_data["accommodations"][0].get("name", "Kh√°ch s·∫°n"),
                                        "start_time": "08:00",
                                        "end_time": "10:00",
                                        "description": description,
                                        "location": matching_accommodation.get("location", matching_accommodation.get("address", merged_data["accommodations"][0].get("location", merged_data["accommodations"][0].get("address", "")))) if matching_accommodation else merged_data["accommodations"][0].get("location", merged_data["accommodations"][0].get("address", "")),
                                        "rating": float(matching_accommodation.get("rating", merged_data["accommodations"][0].get("rating", 4.5))) if matching_accommodation else float(merged_data["accommodations"][0].get("rating", 4.5)),
                                        "price": float(matching_accommodation.get("price", merged_data["accommodations"][0].get("price", 850000))) if matching_accommodation else float(merged_data["accommodations"][0].get("price", 850000)),
                                        "image_url": image_url,
                                        "booking_link": matching_accommodation.get("booking_link", merged_data["accommodations"][0].get("booking_link", "")) if matching_accommodation else merged_data["accommodations"][0].get("booking_link", ""),
                                        "room_info": matching_accommodation.get("room_info", merged_data["accommodations"][0].get("room_info", "Ph√≤ng ti√™u chu·∫©n, 2 gi∆∞·ªùng")) if matching_accommodation else merged_data["accommodations"][0].get("room_info", "Ph√≤ng ti√™u chu·∫©n, 2 gi∆∞·ªùng"),
                                        "tax_info": matching_accommodation.get("tax_info", merged_data["accommodations"][0].get("tax_info", "ƒê√£ bao g·ªìm thu·∫ø VAT")) if matching_accommodation else merged_data["accommodations"][0].get("tax_info", "ƒê√£ bao g·ªìm thu·∫ø VAT"),
                                        "elderly_friendly": matching_accommodation.get("elderly_friendly", merged_data["accommodations"][0].get("elderly_friendly", True)) if matching_accommodation else merged_data["accommodations"][0].get("elderly_friendly", True),
                                        "url": matching_accommodation.get("url", matching_accommodation.get("link", merged_data["accommodations"][0].get("url", merged_data["accommodations"][0].get("link", "")))) if matching_accommodation else merged_data["accommodations"][0].get("url", merged_data["accommodations"][0].get("link", ""))
                                    }
                                elif required_segment == "afternoon" and merged_data.get("places"):
                                    place_index = min(day_num, len(merged_data["places"])-1) if merged_data["places"] else 0
                                    if place_index >= 0 and merged_data["places"]:
                                        # Get place ID first
                                        place_id = merged_data["places"][place_index].get("place_id", merged_data["places"][place_index].get("id", f"place_afternoon_day{day_num+1}"))
                                        
                                        # Print all place IDs for debugging
                                        log.info(f"Available place IDs: {[p.get('place_id', p.get('id', 'unknown')) for p in merged_data.get('places', [])]}")
                                        log.info(f"Looking for place ID: {place_id}")
                                        
                                        # Find the matching place to get complete data
                                        matching_place = None
                                        for place in merged_data.get("places", []):
                                            # Check for exact matches first
                                            if place.get("place_id") == place_id or place.get("id") == place_id:
                                                matching_place = place
                                                log.info(f"Found exact match for place ID: {place_id}")
                                                break
                                            
                                            # If the place_id contains the ID (e.g., "place_123" contains "123")
                                            elif place_id and place.get("place_id") and place_id in place.get("place_id"):
                                                matching_place = place
                                                log.info(f"Found partial match: {place_id} in {place.get('place_id')}")
                                                break
                                            elif place_id and place.get("id") and place_id in place.get("id"):
                                                matching_place = place
                                                log.info(f"Found partial match: {place_id} in {place.get('id')}")
                                                break
                                        
                                        # If no match found, use the one at place_index
                                        if not matching_place:
                                            matching_place = merged_data["places"][place_index]
                                            log.info(f"No match found, using place at index {place_index}")
                                        
                                        # Log the matched place for debugging
                                        log.info(f"Matched place: {matching_place}")
                                        
                                        # Extract image URL
                                        image_url = ""
                                        if matching_place:
                                            image_url = extract_image_url(matching_place)
                                            log.info(f"Extracted place image URL: {image_url}")
                                        
                                        # Process description - add tour guide style narration
                                        original_description = matching_place.get("description", "")
                                        if original_description:
                                            # S·ª≠ d·ª•ng n·ªôi dung t·ª´ original_description nh∆∞ng ƒë·ªÉ model t·ª± vi·∫øt l·∫°i
                                            # v·ªõi gi·ªçng vƒÉn h∆∞·ªõng d·∫´n vi√™n du l·ªãch
                                            key_points = original_description[:200] if len(original_description) > 200 else original_description
                                            description = f"B·∫°n s·∫Ω ƒë∆∞·ª£c kh√°m ph√° ƒë·ªãa ƒëi·ªÉm tuy·ªát v·ªùi n√†y, n∆°i {key_points.split('.')[0].lower() if '.' in key_points else key_points.lower()}. Ch√∫ng ta s·∫Ω c√πng nhau t√¨m hi·ªÉu v·ªÅ vƒÉn h√≥a v√† l·ªãch s·ª≠ ƒë·ªôc ƒë√°o c·ªßa n∆°i ƒë√¢y."
                                        else:
                                            description = "Tham quan ƒë·ªãa ƒëi·ªÉm n·ªïi ti·∫øng n√†y, b·∫°n s·∫Ω ƒë∆∞·ª£c tr·∫£i nghi·ªám v·∫ª ƒë·∫πp ƒë·∫∑c tr∆∞ng c·ªßa ƒë·ªãa ph∆∞∆°ng v√† kh√°m ph√° nh·ªØng n√©t vƒÉn h√≥a ƒë·ªôc ƒë√°o kh√¥ng th·ªÉ b·ªè qua."
                                        
                                        default_activity = {
                                            "id": place_id,
                                            "type": "place",
                                            "name": matching_place.get("name", "ƒê·ªãa ƒëi·ªÉm tham quan"),
                                            "start_time": "14:00",
                                            "end_time": "16:00",
                                            "description": description,
                                            "address": matching_place.get("address", matching_place.get("location", "")),
                                            "categories": matching_place.get("categories", "sightseeing"),
                                            "duration": matching_place.get("duration", "2h"),
                                            "opening_hours": matching_place.get("opening_hours", "08:00-17:00"),
                                            "rating": float(matching_place.get("rating", 4.0)),
                                            "price": float(matching_place.get("price", 50000)) if matching_place.get("price") else "",
                                            "image_url": image_url,
                                            "url": matching_place.get("url", matching_place.get("link", ""))
                                        }
                                elif required_segment == "evening" and merged_data.get("restaurants"):
                                    rest_index = min(day_num, len(merged_data["restaurants"])-1) if merged_data["restaurants"] else 0
                                    if rest_index >= 0 and merged_data["restaurants"]:
                                        # Get restaurant ID first
                                        restaurant_id = merged_data["restaurants"][rest_index].get("restaurant_id", merged_data["restaurants"][rest_index].get("id", f"restaurant_evening_day{day_num+1}"))
                                        
                                        # Print all restaurant IDs for debugging
                                        log.info(f"Available restaurant IDs: {[r.get('restaurant_id', r.get('id', 'unknown')) for r in merged_data.get('restaurants', [])]}")
                                        log.info(f"Looking for restaurant ID: {restaurant_id}")
                                        
                                        # Find the matching restaurant to get complete data
                                        matching_restaurant = None
                                        for restaurant in merged_data.get("restaurants", []):
                                            # Check for exact matches first
                                            if restaurant.get("restaurant_id") == restaurant_id or restaurant.get("id") == restaurant_id:
                                                matching_restaurant = restaurant
                                                log.info(f"Found exact match for restaurant ID: {restaurant_id}")
                                                break
                                            
                                            # If the restaurant_id contains the ID (e.g., "restaurant_123" contains "123")
                                            elif restaurant_id and restaurant.get("restaurant_id") and restaurant_id in restaurant.get("restaurant_id"):
                                                matching_restaurant = restaurant
                                                log.info(f"Found partial match: {restaurant_id} in {restaurant.get('restaurant_id')}")
                                                break
                                            elif restaurant_id and restaurant.get("id") and restaurant_id in restaurant.get("id"):
                                                matching_restaurant = restaurant
                                                log.info(f"Found partial match: {restaurant_id} in {restaurant.get('id')}")
                                                break
                                        
                                        # If no match found, use the one at rest_index
                                        if not matching_restaurant:
                                            matching_restaurant = merged_data["restaurants"][rest_index]
                                            log.info(f"No match found, using restaurant at index {rest_index}")
                                        
                                        # Log the matched restaurant for debugging
                                        log.info(f"Matched restaurant: {matching_restaurant}")
                                        
                                        # Extract image URL
                                        image_url = ""
                                        if matching_restaurant:
                                            image_url = extract_image_url(matching_restaurant)
                                            log.info(f"Extracted restaurant image URL: {image_url}")
                                        
                                        # Process description - add tour guide style narration
                                        original_description = matching_restaurant.get("description", "")
                                        if original_description:
                                            # S·ª≠ d·ª•ng n·ªôi dung t·ª´ original_description nh∆∞ng ƒë·ªÉ model t·ª± vi·∫øt l·∫°i
                                            # v·ªõi gi·ªçng vƒÉn h∆∞·ªõng d·∫´n vi√™n du l·ªãch
                                            key_points = original_description[:200] if len(original_description) > 200 else original_description
                                            description = f"H√£y c√πng th∆∞·ªüng th·ª©c b·ªØa ƒÉn tuy·ªát v·ªùi t·∫°i nh√† h√†ng ƒë·∫∑c bi·ªát n√†y, n∆°i {key_points.split('.')[0].lower() if '.' in key_points else key_points.lower()}. B·∫°n s·∫Ω ƒë∆∞·ª£c tr·∫£i nghi·ªám nh·ªØng h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng c·ªßa ·∫©m th·ª±c ƒë·ªãa ph∆∞∆°ng."
                                        else:
                                            description = "H√£y c√πng nhau th∆∞·ªüng th·ª©c nh·ªØng m√≥n ƒÉn ƒë·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng t·∫°i nh√† h√†ng n·ªïi ti·∫øng n√†y. B·∫°n s·∫Ω ƒë∆∞·ª£c ƒë·∫Øm m√¨nh trong h∆∞∆°ng v·ªã ƒë·∫∑c tr∆∞ng kh√¥ng th·ªÉ t√¨m th·∫•y ·ªü n∆°i n√†o kh√°c."
                                        
                                        default_activity = {
                                            "id": restaurant_id,
                                            "type": "restaurant",
                                            "name": matching_restaurant.get("name", "Nh√† h√†ng"),
                                            "start_time": "19:00",
                                            "end_time": "21:00",
                                            "description": description,
                                            "address": matching_restaurant.get("address", matching_restaurant.get("location", "")),
                                            "cuisines": matching_restaurant.get("cuisines", "ƒê·∫∑c s·∫£n ƒë·ªãa ph∆∞∆°ng"),
                                            "price_range": matching_restaurant.get("price_range", "100,000-300,000 VND"),
                                            "rating": float(matching_restaurant.get("rating", 4.2)),
                                            "phone": matching_restaurant.get("phone", ""),
                                            "services": matching_restaurant.get("services", ["ƒë·∫∑t b√†n"]),
                                            "image_url": image_url,
                                            "url": matching_restaurant.get("url", matching_restaurant.get("link", ""))
                                        }
                            
                            # Only add if we have a valid default activity
                            if default_activity:
                                day_data["segments"].append({
                                    "time_of_day": required_segment,
                                    "activities": [default_activity]
                                })
                            else:
                                # Add empty segment if no default activity can be created
                                day_data["segments"].append({
                                    "time_of_day": required_segment,
                                    "activities": []
                                })
                    
                    # Add to the final plan
                    final_plan["plan_by_day"].append(day_data)
                    
                except Exception as e:
                    log.error(f"Error generating day {day_num+1} with agent: {e}")
                    # Create a basic day structure
                    basic_day = {
                        "date": current_date_str,
                        "day_title": day_title,
                        "segments": [
                            {"time_of_day": "morning", "activities": []},
                            {"time_of_day": "afternoon", "activities": []},
                            {"time_of_day": "evening", "activities": []}
                        ]
                    }
                    final_plan["plan_by_day"].append(basic_day)
            
            return final_plan
            
        except Exception as e:
            log.error(f"Error with agent generation: {e}")
            # Return a basic structure in case of error
            from datetime import datetime, timedelta
            return {
                "error": str(e),
                "trip_name": input_data.get("trip_name", meta.get("trip_name", "Trip Plan")),
                "start_date": datetime.now().strftime("%Y-%m-%d"),
                "end_date": (datetime.now() + timedelta(days=2)).strftime("%Y-%m-%d"),
                "destination": input_data.get("destination", meta.get("destination", "Unknown")),
                "plan_by_day": []
            }

    def _is_primarily_english(self, text):
        """Helper function to determine if text is primarily in English - KH√îNG D√ôNG N·ªÆA"""
        # This function is kept for compatibility but no longer used actively
        return False

    def get_trip_plan(merged_data, metadata=None, model_name="gpt-4o", verbose=True):
        """Get a personalized trip plan based on input parameters"""
        start_time = time.time()
        
        try:
            # Initialize chat model
            chat_model = ChatOpenAI(temperature=0.7, model_name=model_name)
            
            # Extract data from merged_data
            destination = merged_data.get("destination", "")
            days = merged_data.get("days", 3)
            start_date = merged_data.get("start_date", "")
            
            if not start_date:
                start_date = datetime.now().strftime("%Y-%m-%d")
            
            # Pass ID maps from metadata to merged_data if available
            if metadata and "accommodation_id_map" in metadata:
                merged_data["accommodation_id_map"] = metadata.get("accommodation_id_map", {})
            if metadata and "place_id_map" in metadata:
                merged_data["place_id_map"] = metadata.get("place_id_map", {})
            if metadata and "restaurant_id_map" in metadata:
                merged_data["restaurant_id_map"] = metadata.get("restaurant_id_map", {})
            
            # Add system message about tour guide style
            system_message = """
            T·∫°o k·∫ø ho·∫°ch du l·ªãch chi ti·∫øt v·ªõi gi·ªçng vƒÉn H∆Ø·ªöNG D·∫™N VI√äN DU L·ªäCH. 
            M·ªói m√¥ t·∫£ ho·∫°t ƒë·ªông n√™n s·ª≠ d·ª•ng c√¢u nh∆∞:
            - "B·∫°n s·∫Ω ƒë∆∞·ª£c kh√°m ph√°..."
            - "H√£y c√πng th∆∞·ªüng th·ª©c..."
            - "Ch√∫ng ta s·∫Ω tham quan..."
            - "Qu√Ω kh√°ch s·∫Ω c√≥ c∆° h·ªôi..."
            
            M·ªói ph√¢n ƒëo·∫°n th·ªùi gian (s√°ng, chi·ªÅu, t·ªëi) n√™n c√≥ 2-3 ho·∫°t ƒë·ªông li√™n quan v√† h·ª£p l√Ω.
            S·ª≠ d·ª•ng d·ªØ li·ªáu m√¥ t·∫£ t·ª´ input nh∆∞ng PH·∫¢I ƒë·ªãnh d·∫°ng l·∫°i v·ªõi gi·ªçng vƒÉn h∆∞·ªõng d·∫´n vi√™n du l·ªãch.
            """
            
            # Create a complete trip plan
            plan_output = get_complete_trip_plan(merged_data, days, start_date, chat_model, verbose, system_message=system_message)
            
            # Add metadata if provided
            if metadata:
                for key, value in metadata.items():
                    if key not in plan_output.get("plan", {}):
                        plan_output["plan"][key] = value
            
            end_time = time.time()
            if verbose:
                print(f"Trip plan generation completed in {end_time - start_time:.2f} seconds")
            
            return plan_output
            
        except Exception as e:
            print(f"Error generating trip plan: {str(e)}")
            import traceback
            traceback.print_exc()
            return {
                "status": "error",
                "error": str(e),
                "plan": {}
            }

    # Th√™m h√†m gi√∫p x√°c ƒë·ªãnh th·ªùi gian b·∫Øt ƒë·∫ßu d·ª±a v√†o th·ªùi ƒëi·ªÉm hi·ªán t·∫°i
    def _get_appropriate_start_times(self, current_hour=None):
        """X√°c ƒë·ªãnh th·ªùi gian b·∫Øt ƒë·∫ßu ph√π h·ª£p d·ª±a v√†o th·ªùi ƒëi·ªÉm hi·ªán t·∫°i"""
        from datetime import datetime
        
        if current_hour is None:
            current_hour = datetime.now().hour
        
        # ƒê·ªãnh nghƒ©a khung gi·ªù cho c√°c segment
        morning_hours = range(5, 12)   # 5:00 - 11:59
        afternoon_hours = range(12, 18) # 12:00 - 17:59
        evening_hours = range(18, 23)  # 18:00 - 22:59
        
        # X√°c ƒë·ªãnh segment hi·ªán t·∫°i v√† c√°c segment c√≤n l·∫°i
        current_segment = None
        if current_hour in morning_hours:
            current_segment = "morning"
        elif current_hour in afternoon_hours:
            current_segment = "afternoon"
        elif current_hour in evening_hours:
            current_segment = "evening"
        else:  # Qua n·ª≠a ƒë√™m (23:00-4:59), ch√∫ng ta s·∫Ω l√™n k·∫ø ho·∫°ch cho ng√†y ti·∫øp theo
            current_segment = "next_day"
        
        # C·∫•u tr√∫c th·ªùi gian b·∫Øt ƒë·∫ßu/k·∫øt th√∫c m·∫∑c ƒë·ªãnh cho t·ª´ng segment
        segment_times = {
            "morning": [
                {"start_time": "08:00", "end_time": "09:30"},
                {"start_time": "10:00", "end_time": "11:30"}
            ],
            "afternoon": [
                {"start_time": "13:00", "end_time": "14:30"},
                {"start_time": "15:00", "end_time": "16:30"}
            ],
            "evening": [
                {"start_time": "18:00", "end_time": "19:30"},
                {"start_time": "20:00", "end_time": "21:30"}
            ]
        }
        
        # ƒêi·ªÅu ch·ªânh th·ªùi gian b·∫Øt ƒë·∫ßu d·ª±a v√†o th·ªùi ƒëi·ªÉm hi·ªán t·∫°i
        adjusted_times = {}
        
        if current_segment == "morning":
            # N·∫øu ƒëang l√† bu·ªïi s√°ng, ƒëi·ªÅu ch·ªânh th·ªùi gian b·∫Øt ƒë·∫ßu cho bu·ªïi s√°ng
            start_hour = max(8, current_hour + 1)  # B·∫Øt ƒë·∫ßu √≠t nh·∫•t 1 gi·ªù sau gi·ªù hi·ªán t·∫°i, kh√¥ng s·ªõm h∆°n 8:00
            adjusted_times["morning"] = [
                {"start_time": f"{start_hour:02d}:00", "end_time": f"{start_hour+1:02d}:30"},
                {"start_time": f"{start_hour+2:02d}:00", "end_time": f"{start_hour+3:02d}:00"}
            ]
            # Gi·ªØ nguy√™n th·ªùi gian cho c√°c segment kh√°c
            adjusted_times["afternoon"] = segment_times["afternoon"]
            adjusted_times["evening"] = segment_times["evening"]
            
        elif current_segment == "afternoon":
            # B·ªè qua bu·ªïi s√°ng, ch·ªâ l√™n k·∫ø ho·∫°ch cho bu·ªïi chi·ªÅu v√† t·ªëi
            start_hour = max(13, current_hour + 1)  # B·∫Øt ƒë·∫ßu √≠t nh·∫•t 1 gi·ªù sau gi·ªù hi·ªán t·∫°i
            adjusted_times["afternoon"] = [
                {"start_time": f"{start_hour:02d}:00", "end_time": f"{start_hour+1:02d}:30"},
                {"start_time": f"{start_hour+2:02d}:00", "end_time": f"{start_hour+3:02d}:00"}
            ]
            adjusted_times["evening"] = segment_times["evening"]
            adjusted_times["morning"] = None  # ƒê√°nh d·∫•u bu·ªïi s√°ng kh√¥ng c√≥ k·∫ø ho·∫°ch
            
        elif current_segment == "evening":
            # B·ªè qua bu·ªïi s√°ng v√† chi·ªÅu, ch·ªâ l√™n k·∫ø ho·∫°ch cho bu·ªïi t·ªëi
            start_hour = max(18, current_hour + 1)  # B·∫Øt ƒë·∫ßu √≠t nh·∫•t 1 gi·ªù sau gi·ªù hi·ªán t·∫°i
            adjusted_times["evening"] = [
                {"start_time": f"{start_hour:02d}:00", "end_time": f"{start_hour+1:02d}:30"},
                {"start_time": f"{start_hour+2:02d}:00", "end_time": f"{min(start_hour+3, 23):02d}:00"}
            ]
            adjusted_times["morning"] = None  # ƒê√°nh d·∫•u bu·ªïi s√°ng kh√¥ng c√≥ k·∫ø ho·∫°ch
            adjusted_times["afternoon"] = None  # ƒê√°nh d·∫•u bu·ªïi chi·ªÅu kh√¥ng c√≥ k·∫ø ho·∫°ch
            
        else:  # next_day - qua n·ª≠a ƒë√™m, l√™n k·∫ø ho·∫°ch cho ng√†y mai
            # Gi·ªØ nguy√™n t·∫•t c·∫£ th·ªùi gian m·∫∑c ƒë·ªãnh
            adjusted_times = segment_times
        
        return adjusted_times, current_segment


# ---------------------------------------------------------------------------
# üß™ CLI quick test (python travel_planner.py)
# ---------------------------------------------------------------------------
if __name__ == "__main__":
    sample_input = {
        "accommodations": [{"id": "hotel42", "name": "Sala", "price": 850000}],
        "places": [{"id": "place10", "name": "B√£i bi·ªÉn M·ªπ Kh√™"}],
        "restaurants": [{"id": "fnb12", "name": "Nh√† h√†ng B√© M·∫∑n"}],
    }
    planner = PlanModel()
    plan = planner.generate_plan(sample_input, trip_name="Test", destination="ƒê√† N·∫µng")
    print(json.dumps(plan, ensure_ascii=False, indent=2))
