from typing import List, Optional
import os
import sys
import json
from pathlib import Path

current_dir = Path(__file__).parent
src_dir = current_dir.parent
sys.path.append(str(src_dir))

from promts import system_review_promt, few_shot_review_promt, reviewer_promt, note_promt, summary_tips_promt
from langchain.agents import initialize_agent, AgentType
from langchain.tools import Tool
from langchain.chat_models import ChatOpenAI
from langchain.tools.tavily_search import TavilySearchResults
from langchain.memory import ConversationBufferMemory
from dotenv import load_dotenv

load_dotenv()

class TravelReviewer:
    def __init__(self, openai_api_key: Optional[str] = None, tavily_api_key: Optional[str] = None):
        """
        Initialize the TravelReviewer agent.
        
        Args:
            openai_api_key: OpenAI API key (optional, will use env var if not provided)
            tavily_api_key: Tavily API key (optional, will use env var if not provided)
        """
        self.openai_api_key = openai_api_key or os.getenv("OPEN_API_KEY")
        self.tavily_api_key = tavily_api_key or os.getenv("TAVILY_API_KEY")
        
        if not self.openai_api_key:
            raise ValueError("OpenAI API key is required")
        if not self.tavily_api_key:
            raise ValueError("Tavily API key is required")
            
        self.llm = ChatOpenAI(
            model="gpt-3.5-turbo",
            openai_api_key=self.openai_api_key,
            temperature=1.0
        )
        
        self._setup_tools()
        self._setup_agent()
    def build_prompt_from_plan_agent(self, plan: dict) -> str:
        """Build prompts for reviewing and adding tips to each day in the travel plan.
        
        Args:
            plan (dict): The travel plan generated by plan agent
            
        Returns:
            str: A structured prompt for reviewing the plan
        """
        trip_name = plan.get('trip_name', 'Chuyến du lịch')
        destination = plan.get('destination', 'địa điểm')
        plan_by_day = plan.get('plan_by_day', [])
        
        prompt = f"""Bạn là một chuyên gia du lịch giàu kinh nghiệm, chuyên cung cấp những mẹo du lịch thực tế và hữu ích cho khách du lịch.
        Hãy review và thêm tips cho chuyến du lịch sau:
        Tên chuyến đi: {trip_name}
        Địa điểm: {destination}
        Ví dụ về cách trả lời mong muốn:
        {few_shot_review_promt}
        Bây giờ, hãy cung cấp tips tương tự cho các ngày trong chuyến đi:
        """

        for day in plan_by_day:
            date = day.get('date', '')
            day_title = day.get('day_title', '')
            segments = day.get('segments', [])
            
            # Tạo prompt cho tips chung của ngày
            prompt += f"\n{day_title} ({date}):\n"
            prompt += f"""{reviewer_promt}
            """
            
            for segment in segments:
                time_of_day = segment.get('time_of_day', '')
                activities = segment.get('activities', [])
                
                prompt += f"\nBuổi {time_of_day}:\n"
                
                for activity in activities:
                    activity_type = activity.get('type', '')
                    name = activity.get('name', '')
                    start_time = activity.get('start_time', '')
                    end_time = activity.get('end_time', '')
                    description = activity.get('description', '')
                    
                    prompt += f"""
            - {name} ({activity_type})
            Thời gian: {start_time} - {end_time}
            Mô tả: {description}
            """
                    
                    prompt += f"""{note_promt}"""
        
        return prompt

    def extract_travel_tips_from_text(self, text: str) -> str:
        prompt = f"""Hãy trích xuất 3-5 mẹo du lịch thực tế cho khách du lịch khi đến thăm địa điểm hoặc thực hiện hoạt động sau: {text}. 
        Kết quả trả về nên là danh sách các mẹo ngắn gọn và hữu ích. Tập trung vào những lời khuyên thực tế, có thể áp dụng ngay và hữu ích cho khách du lịch.
        Mỗi mẹo nên bao gồm:
        - Thông tin thực tế về địa điểm/hoạt động
        - Lời khuyên về thời gian tốt nhất để tham quan
        - Những điều cần lưu ý về văn hóa địa phương
        - Mẹo tiết kiệm chi phí
        - Cách tránh các tình huống khó khăn thường gặp"""
        return self.llm.predict(prompt)    
    def _setup_tools(self):
        """Set up the tools for the agent."""
        self.search_tool = TavilySearchResults(
            api_key=self.tavily_api_key,
            max_results=2
        )
        self.tip_extractor_tool = Tool.from_function(
            func=self.extract_travel_tips_from_text,
            name="TipExtractor",
            description="Extract practical travel tips from travel articles or descriptions."
        )
        self.tools = [self.search_tool, self.tip_extractor_tool]
        
    def _setup_agent(self):
        """Set up the ReAct agent with tools and memory."""
        self.memory = ConversationBufferMemory(
            memory_key="chat_history",
            return_messages=True
        )
        
        system_prompt = system_review_promt

        self.agent = initialize_agent(
            tools=self.tools,
            llm=self.llm,
            agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
            verbose=True,
            memory=self.memory,
            handle_parsing_errors=True,
            system_message=system_prompt
        )
        
    def get_travel_tips(self, query: str) -> List[str]:
        """
        Get travel tips for a specific location or activity.
        
        Args:
            query: The search query (e.g., "Find practical travel tips for visiting Hanoi Old Quarter in the afternoon")
            
        Returns:
            List of travel tips
        """
        try:
            result = self.agent.run(query)
            tips = [tip.strip() for tip in result.split('\n') if tip.strip()]
            return tips
        except Exception as e:
            print(f"Error getting travel tips: {str(e)}")
            return []

    def estimate_activity_price(self, activity: dict, destination: str) -> float:
        """Estimate the price for a specific activity based on its type and other details.
        
        Args:
            activity (dict): The activity data
            destination (str): The destination of the trip
            
        Returns:
            float: The estimated price for the activity
        """
        activity_type = activity.get('type', '').lower()
        name = activity.get('name', '')
        description = activity.get('description', '')
        
        prompt = f"""Hãy ước tính giá cho hoạt động du lịch sau tại {destination}:
        
        Loại hoạt động: {activity_type}
        Tên: {name}
        Mô tả: {description}

        Trả về chỉ một số duy nhất là ước tính giá tiền bằng VND, không kèm theo chữ, đơn vị hay giải thích.
        Ví dụ: 250000 (không phải 250,000 VND hoặc 250.000đ)

        Lưu ý:
        - Thông tin giá phải thực tế dựa trên giá cả tại {destination}
        - Đối với khách sạn/nhà nghỉ, đây là giá 1 đêm
        - Đối với nhà hàng, đây là giá trung bình cho một người
        - Đối với hoạt động tham quan, đây là giá vé vào cổng hoặc chi phí tham gia
        - Đối với di chuyển, đây là chi phí di chuyển trung bình
        """
        
        try:
            price_str = self.llm.predict(prompt).strip()
            price_str = ''.join(c for c in price_str if c.isdigit())
            if price_str:
                return float(price_str)
            return 0.0
        except Exception as e:
            print(f"Error estimating price: {str(e)}")
            return 0.0

    def summarize_tips_to_list(self, detailed_tips: List[str]) -> List[str]:
        """Summarize detailed tips into a simple list format.
        
        Args:
            detailed_tips (List[str]): The detailed tips returned by the agent
            
        Returns:
            List[str]: Simplified list of travel tips
        """
        tip_text = "\n".join(detailed_tips)
        if not detailed_tips:
            return []
        prompt = f"""Hãy tóm tắt các mẹo du lịch sau đây thành một danh sách đơn giản, mỗi mẹo là một câu ngắn gọn.
        Tips gốc:
        {tip_text}
        {summary_tips_promt}
        """
        
        try:
            result = self.llm.predict(prompt)
            tips = [tip.strip() for tip in result.split('\n') if tip.strip()]
            tips = [tip for tip in tips if not tip.startswith('#') and not tip.startswith('*') and len(tip) > 10]
            return tips
        except Exception as e:
            print(f"Error summarizing tips: {str(e)}")
            return detailed_tips  # Trả về tips gốc nếu có lỗi

    def process_plan(self, plan: dict) -> dict:
        """Process the travel plan and add tips for each day and price estimates for activities.
        Args:
            plan (dict): The travel plan generated by plan agent
        Returns:
            dict: The plan with added daily tips and price estimates
        """
        destination = plan.get('destination', '')
        
        for day in plan['plan_by_day']:
            temp_plan = {
                'trip_name': plan['trip_name'],
                'destination': destination,
                'plan_by_day': [day]
            }
            prompt = self.build_prompt_from_plan_agent(temp_plan)
            detailed_tips = self.get_travel_tips(prompt)
            simplified_tips = self.summarize_tips_to_list(detailed_tips)
            day['daily_tips'] = simplified_tips
            for segment in day.get('segments', []):
                for activity in segment.get('activities', []):
                    if 'price_ai_estimate' not in activity:
                        price = self.estimate_activity_price(activity, destination)
                        activity['price_ai_estimate'] = price
        return plan

if __name__ == "__main__":
    plan_path = os.path.join(src_dir, 'test_api/generated_plan/plan_default_trip.json')
    
    aggregator = TravelReviewer()
    plan = json.load(open(plan_path))
    processed_plan = aggregator.process_plan(plan)
    print(json.dumps(processed_plan, indent=2, ensure_ascii=False))