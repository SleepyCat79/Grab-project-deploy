from typing import List, Optional
import os
import sys
import json
from pathlib import Path

# Add the src directory to Python path
current_dir = Path(__file__).parent
src_dir = current_dir.parent
sys.path.append(str(src_dir))

from promts import system_review_promt
from langchain.agents import initialize_agent, AgentType
from langchain.tools import Tool
from langchain.chat_models import ChatOpenAI
from langchain.tools.tavily_search import TavilySearchResults
from langchain.memory import ConversationBufferMemory
from dotenv import load_dotenv

load_dotenv()

class TravelTipAggregator:
    def __init__(self, openai_api_key: Optional[str] = None, tavily_api_key: Optional[str] = None):
        """
        Initialize the TravelTipAggregator agent.
        
        Args:
            openai_api_key: OpenAI API key (optional, will use env var if not provided)
            tavily_api_key: Tavily API key (optional, will use env var if not provided)
        """
        self.openai_api_key = openai_api_key or os.getenv("OPEN_API_KEY")
        self.tavily_api_key = tavily_api_key or os.getenv("TAVILY_API_KEY")
        
        if not self.openai_api_key:
            raise ValueError("OpenAI API key is required")
        if not self.tavily_api_key:
            raise ValueError("Tavily API key is required")
            
        self.llm = ChatOpenAI(
            model="gpt-4o-mini",
            temperature=0.5,
            openai_api_key=self.openai_api_key
        )
        
        self._setup_tools()
        self._setup_agent()
    def build_prompt_from_plan_agent(self, plan: dict) -> str:
        """Build prompts for reviewing and adding tips to each day in the travel plan.
        
        Args:
            plan (dict): The travel plan generated by plan agent
            
        Returns:
            str: A structured prompt for reviewing the plan
        """
        trip_name = plan.get('trip_name', 'Chuyến du lịch')
        destination = plan.get('destination', 'địa điểm')
        plan_by_day = plan.get('plan_by_day', [])
        
        prompt = f"""Bạn là một chuyên gia du lịch giàu kinh nghiệm, chuyên cung cấp những mẹo du lịch thực tế và hữu ích cho khách du lịch.

Hãy review và thêm tips cho chuyến du lịch sau:

Tên chuyến đi: {trip_name}
Địa điểm: {destination}

Ví dụ về cách trả lời mong muốn:

### Ngày 1: Khám phá phố cổ Hà Nội
1. **Thời gian tốt nhất để tham quan**: Sáng sớm (6:00 - 8:00) để tránh đông đúc và ngắm nhịp sống buổi sáng của người dân địa phương.
2. **Cách di chuyển**: Nên đi bộ hoặc thuê xe đạp để khám phá các ngõ nhỏ, tránh taxi vào giờ cao điểm.
3. **Chi phí dự kiến**: Khoảng 500,000 VND cho cả ngày, bao gồm ăn uống và mua sắm.
4. **Những điều cần tránh**: Tránh mua đồ ở các cửa hàng đầu phố, thường đắt hơn 2-3 lần so với trong ngõ.
5. **Mẹo tiết kiệm**: Ăn sáng tại quán vỉa hè, giá chỉ 20,000 - 30,000 VND/phần.
6. **Văn hóa cần lưu ý**: Khi vào chùa, nhớ mặc quần áo kín đáo và cởi giày trước khi vào.

### Ngày 2: Trải nghiệm ẩm thực
1. **Thời gian tốt nhất**: Buổi tối (18:00 - 21:00) để thưởng thức ẩm thực đường phố.
2. **Cách di chuyển**: Đi bộ giữa các quán ăn, khoảng cách thường ngắn.
3. **Chi phí dự kiến**: 300,000 - 400,000 VND cho bữa tối và đồ uống.
4. **Những điều cần tránh**: Không nên ăn quá no ở một quán, hãy thử nhiều món ở nhiều quán khác nhau.
5. **Mẹo tiết kiệm**: Chia sẻ món ăn với bạn bè để thử được nhiều món.
6. **Văn hóa cần lưu ý**: Khi ăn phở, nên thêm các loại rau thơm và nước mắm theo khẩu vị.

Bây giờ, hãy cung cấp tips tương tự cho các ngày trong chuyến đi:

"""

        for day in plan_by_day:
            date = day.get('date', '')
            day_title = day.get('day_title', '')
            segments = day.get('segments', [])
            
            # Tạo prompt cho tips chung của ngày
            prompt += f"\n{day_title} ({date}):\n"
            prompt += f"""Hãy cung cấp 5-6 mẹo du lịch thực tế CHO RIÊNG NGÀY NÀY, bao gồm:
1. Thời gian tốt nhất để tham quan các địa điểm
2. Cách di chuyển giữa các địa điểm
3. Chi phí dự kiến cho cả ngày
4. Những điều cần tránh
5. Mẹo tiết kiệm
6. Văn hóa và phong tục địa phương cần lưu ý

Các hoạt động trong ngày này:
"""
            
            for segment in segments:
                time_of_day = segment.get('time_of_day', '')
                activities = segment.get('activities', [])
                
                prompt += f"\nBuổi {time_of_day}:\n"
                
                for activity in activities:
                    activity_type = activity.get('type', '')
                    name = activity.get('name', '')
                    start_time = activity.get('start_time', '')
                    end_time = activity.get('end_time', '')
                    description = activity.get('description', '')
                    
                    prompt += f"""
- {name} ({activity_type})
  Thời gian: {start_time} - {end_time}
  Mô tả: {description}
"""
        
        prompt += """
Lưu ý:
- Hãy cung cấp thông tin thực tế, có thể áp dụng ngay
- Ưu tiên thông tin từ người dân địa phương và du khách có kinh nghiệm
- Trả lời bằng tiếng Việt, ngắn gọn và dễ hiểu
- Mỗi tip nên có 1-2 câu giải thích ngắn gọn
- CHỈ CUNG CẤP TIPS CHO NGÀY ĐANG ĐƯỢC XEM XÉT, KHÔNG BAO GỒM CÁC NGÀY KHÁC
- Format tips giống như ví dụ trên, với số thứ tự và tiêu đề in đậm
"""
        
        return prompt

    def extract_travel_tips_from_text(self, text: str) -> str:
        prompt = f"""Hãy trích xuất 3-5 mẹo du lịch thực tế cho khách du lịch khi đến thăm địa điểm hoặc thực hiện hoạt động sau: {text}. 
        Kết quả trả về nên là danh sách các mẹo ngắn gọn và hữu ích. Tập trung vào những lời khuyên thực tế, có thể áp dụng ngay và hữu ích cho khách du lịch.
        Mỗi mẹo nên bao gồm:
        - Thông tin thực tế về địa điểm/hoạt động
        - Lời khuyên về thời gian tốt nhất để tham quan
        - Những điều cần lưu ý về văn hóa địa phương
        - Mẹo tiết kiệm chi phí
        - Cách tránh các tình huống khó khăn thường gặp"""
        return self.llm.predict(prompt)    
    def _setup_tools(self):
        """Set up the tools for the agent."""
        # Web search tool using Tavily
        self.search_tool = TavilySearchResults(
            api_key=self.tavily_api_key,
            max_results=3
        )
        self.tip_extractor_tool = Tool.from_function(
            func=self.extract_travel_tips_from_text,
            name="TipExtractor",
            description="Extract practical travel tips from travel articles or descriptions."
        )
        
        self.tools = [self.search_tool, self.tip_extractor_tool]
        
    def _setup_agent(self):
        """Set up the ReAct agent with tools and memory."""
        self.memory = ConversationBufferMemory(
            memory_key="chat_history",
            return_messages=True
        )
        
        system_prompt = system_review_promt

        self.agent = initialize_agent(
            tools=self.tools,
            llm=self.llm,
            agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION,
            verbose=True,
            memory=self.memory,
            handle_parsing_errors=True,
            system_message=system_prompt
        )
        
    def get_travel_tips(self, query: str) -> List[str]:
        """
        Get travel tips for a specific location or activity.
        
        Args:
            query: The search query (e.g., "Find practical travel tips for visiting Hanoi Old Quarter in the afternoon")
            
        Returns:
            List of travel tips
        """
        try:
            result = self.agent.run(query)
            tips = [tip.strip() for tip in result.split('\n') if tip.strip()]
            return tips
        except Exception as e:
            print(f"Error getting travel tips: {str(e)}")
            return []

    def process_plan(self, plan: dict) -> dict:
        """Process the travel plan and add tips for each day.
        
        Args:
            plan (dict): The travel plan generated by plan agent
            
        Returns:
            dict: The plan with added daily tips
        """
        # Process each day separately
        for day in plan['plan_by_day']:
            # Create a temporary plan with just this day
            temp_plan = {
                'trip_name': plan['trip_name'],
                'destination': plan['destination'],
                'plan_by_day': [day]
            }
            
            # Get tips for this specific day
            prompt = self.build_prompt_from_plan_agent(temp_plan)
            tips = self.get_travel_tips(prompt)
            
            # Add tips only to this day
            day['daily_tips'] = tips
        
        return plan

# Example usage
if __name__ == "__main__":
    # Get the absolute path to the plan file
    plan_path = os.path.join(src_dir, 'test_api/generated_plan/plan_default_trip.json')
    
    aggregator = TravelTipAggregator()
    plan = json.load(open(plan_path))
    processed_plan = aggregator.process_plan(plan)
    print(json.dumps(processed_plan, indent=2, ensure_ascii=False))